(window.webpackJsonp=window.webpackJsonp||[]).push([[11,5,12,19,25,43],{123:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=s.a.createContext({}),c=function(e){var t=s.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return s.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},f=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,m=p["".concat(i,".").concat(f)]||p[f]||d[f]||a;return n?s.a.createElement(m,o(o({ref:t},u),{},{components:n})):s.a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return s.a.createElement.apply(null,i)}return s.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},124:function(e,t,n){"use strict";function r(e){var t,n,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(s&&(s+=" "),s+=n);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}t.a=function(){for(var e,t,n=0,s="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(s&&(s+=" "),s+=t);return s}},125:function(e,t,n){"use strict";var r=n(0),s=n(126);t.a=function(){var e=Object(r.useContext)(s.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},126:function(e,t,n){"use strict";var r=n(0),s=Object(r.createContext)(void 0);t.a=s},127:function(e,t,n){"use strict";var r=n(0),s=n.n(r),a=n(125),i=n(124),o=n(47),l=n.n(o),u=37,c=39;t.a=function(e){var t=e.block,n=e.children,o=e.defaultValue,p=e.values,d=e.groupId,f=e.className,m=Object(a.a)(),h=m.tabGroupChoices,b=m.setTabGroupChoices,g=Object(r.useState)(o),$=g[0],y=g[1],_=Object(r.useState)(!1),T=_[0],O=_[1];if(null!=d){var j=h[d];null!=j&&j!==$&&p.some((function(e){return e.value===j}))&&y(j)}var v=function(e){y(e),null!=d&&b(d,e)},E=[],P=function(e){e.metaKey||e.altKey||e.ctrlKey||O(!0)},R=function(){O(!1)};return Object(r.useEffect)((function(){return window.addEventListener("keydown",P),window.addEventListener("mousedown",R),function(){window.removeEventListener("keydown",P),window.removeEventListener("mousedown",R)}}),[]),s.a.createElement("div",null,s.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":t},f)},p.map((function(e){var t=e.value,n=e.label;return s.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":$===t,className:Object(i.a)("tabs__item",l.a.tabItem,{"tabs__item--active":$===t}),style:T?{}:{outline:"none"},key:t,ref:function(e){return E.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case c:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case u:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(E,e.target,e),P(e)},onFocus:function(){return v(t)},onClick:function(){v(t),O(!1)},onPointerDown:function(){return O(!1)}},n)}))),s.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter((function(e){return e.props.value===$}))[0]))}},128:function(e,t,n){"use strict";var r=n(0),s=n.n(r);t.a=function(e){return s.a.createElement("div",null,e.children)}},50:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(2),s=n(6),a=(n(0),n(123)),i={title:"Search Results",parent:"resultlist",order:1},o={unversionedId:"examples/listres",id:"examples/listres",isDocsHomePage:!1,title:"Search Results",description:"The response:",source:"@site/docs/examples/listres.md",slug:"/examples/listres",permalink:"/doc.pidconsortium.eu/docs/examples/listres",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/listres.md",version:"current"},l=[{value:"The response:",id:"the-response",children:[]}],u={rightToc:l};function c(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"the-response"},"The response:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 200 OK: (Success)"),Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 401 Unauthorized: Your username or your password is wrong"),Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 404 NOT found: The url doesn't exist")),Object(a.b)("p",null,"After a successful request, the response consists of a list of PIDs "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"GRNET\n66742AB2-5685-11E3-A413-1C6F65A666B5\n305F66A9-3994-42D6-A9F6-8E629126DE14\nB4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07\n0CEEA495-71FA-460B-97A4-81E7E597B636\n")))}c.isMDXComponent=!0},56:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(2),s=n(6),a=(n(0),n(123)),i={title:"Curl",parent:"list",order:1},o={unversionedId:"examples/listcurl",id:"examples/listcurl",isDocsHomePage:!1,title:"Curl",description:"The request in curl",source:"@site/docs/examples/listcurl.md",slug:"/examples/listcurl",permalink:"/doc.pidconsortium.eu/docs/examples/listcurl",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/listcurl.md",version:"current"},l=[],u={rightToc:l};function c(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in curl"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},'curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/\n')))}c.isMDXComponent=!0},57:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(2),s=n(6),a=(n(0),n(123)),i={title:"Perl",parent:"list",order:4},o={unversionedId:"examples/listperl",id:"examples/listperl",isDocsHomePage:!1,title:"Perl",description:"The request in perl",source:"@site/docs/examples/listperl.md",slug:"/examples/listperl",permalink:"/doc.pidconsortium.eu/docs/examples/listperl",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/listperl.md",version:"current"},l=[],u={rightToc:l};function c(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in perl"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-perl"},"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Getopt::Long;\nuse Switch 'Perl5', 'Perl6';\nuse JSON;\nuse WWW::Curl::Easy;\n\nmy $fullargv0 = $0;\nmy ($argv0) = $fullargv0 =~ /([^\\/\\\\]+)$/;\n\nmy %settings = (\n'debug' => 'False',\n'handle' => {\n    'action' =>'get',\n    'credentials'   =>  {\n        'username'  => 'empty',\n        'password'  => 'empty',\n        'baseuri'   => 'empty',\n    },\n    'data'  =>{\n        'get'   => '',\n        'putpost'=> '',\n    },\n    'format' => 'none',\n    'headerextra'   => '',\n    'type' => 'none',\n    'url'=> {\n        'pid'=> '',\n    },\n},\n);\n\n# Main subroutine\nsub main {\n\n    #Get the subroutine arguments\n    my $settings_ref = shift;\n\n    # Get the script arguments\n    (my $returncode) = get_arguments($settings_ref);\n\n    if( $returncode == 0 ) \n        performGet($settings_ref); \n\n    return($returncode);\n}\n \n# Subroutine to perform a GET action\nsub performGet {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n\n    #construct url and headers\n    my $url=\"$settings_ref->{handle}->{credentials}->{baseuri}\";\n    printf(\"The constructed url is        : %s\\n\",$url) if $settings_ref->{debug} =~ /True/ ;\n    my @httpHeaders = ('Accept: application/json' ) ;\n    push(@httpHeaders, \"$settings_ref->{handle}->{headerextra}\" ) if $settings_ref->{handle}->{headerextra} ;\n\n    # perform action\n    (my $returncode, my $response_code, my $response_content_type ) = httpGet($settings_ref, $url, \\@httpHeaders);\n\n    # Looking at the results of the curl request\n    if ($returncode == 0) {\n        print('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n        # judge result and next action based on $response_code\n        if ($response_code >= 200 && $response_code < 300 ) {\n            print('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print Dumper $settings_ref->{handle}->{data}->{get} if $settings_ref->{debug} =~ /True/ ;\n\n            # show only types we want to show. implicit is that we than only show type and parsed_data\n            unless ( $settings_ref->{handle}->{type} =~ /none/ ) {\n\n                if (ref($settings_ref->{handle}->{data}->{get}) eq 'ARRAY') {\n                    print \"We have an array of hashes \\n\" if $settings_ref->{debug} =~ /True/ ;\n\n                    # grep so we have only the hashes with the selected fields\n                    @{$settings_ref->{handle}->{data}->{get}} = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @{$settings_ref->{handle}->{data}->{get}} ; \n                    print Dumper @{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;\n\n                    # delete items from retrieved handle which are not type and parsed_data\n                    for my $hash ( @{$settings_ref->{handle}->{data}->{get}}) {\n                        foreach my $key ( keys %$hash ) {           \n                            print \"key: $key, value: $hash->{$key}\\n\" if $settings_ref->{debug} =~ /True/ ;\n                            unless ( $key =~ /^type|^parsed_data/ ) {\n                                delete $hash->{$key};\n                            }\n                        }   \n                    }\n                } else {\n                    print \"We have a hash of arrays of hashes \\n\" if  $settings_ref->{debug} =~ /True/ ;\n                    # grep so we have only the hashes with the selected fields\n                    for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { \n                        @$array = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @$array ;\n                    } \n                    print Dumper %{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;\n\n                    # delete items from retrieved handle which are not type and parsed_data\n                    for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { \n                        for my $hash ( @$array ) {\n                            foreach my $key ( keys %$hash ) {           \n                                print \"key: $key, value: $hash->{$key}\\n\" if $settings_ref->{debug} =~ /True/ ;\n                                unless ( $key =~ /^type|^parsed_data/ ) {\n                                    delete $hash->{$key};\n                                }\n                            }\n                        }   \n                    }\n                }\n            }\n\n            # print the data in json format, pretty if the parameter is set\n            my $json = JSON->new;\n            my $json_printed;\n            if ( $settings_ref->{handle}->{format} =~ /pretty/ ) {\n                $json_printed = $json->pretty->encode( $settings_ref->{handle}->{data}->{get} );\n            } else {\n                $json_printed = $json->encode( $settings_ref->{handle}->{data}->{get} );\n            }\n            print(\"$json_printed\\n\");\n\n        } else {\n            print('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_code\\n\");\n        } \n\n    } else {\n        print('An error happened\\n');\n    }\n}\n\n# Subroutine to retrieve data via a http GET\nsub httpGet {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n    my $url = shift;\n    my $httpHeaders_ref = shift;\n\n    print('Entering httpGet              :\\n')         if $settings_ref->{debug} =~ /True/;\n\n    # local varables\n    my $response_body;\n    my $response_code;\n    my $response_content_type;\n\n    my $curl = WWW::Curl::Easy->new;\n\n    # set options for the curl http request\n    $curl->setopt(CURLOPT_HEADER, 0);\n    $curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );\n    $curl->setopt(CURLOPT_URL, $url);\n    $curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});\n    $curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});\n\n    # A filehandle, reference to a scalar or reference to a typeglob can be used here.\n    open my $fh, '>', \\$response_body or die \"$!\";\n    $curl->setopt(CURLOPT_WRITEDATA, $fh);\n\n    # Do the actual curl http request\n    my $returncode = $curl->perform;\n\n    # close file handle\n    close($fh);\n\n    # Looking at the results of the curl request\n    if ($returncode == 0) {\n        print('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n        $response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);\n        $response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);\n        print(\"Received response code        : $response_code\\n\")         if $settings_ref->{debug} =~ /True/;\n        print(\"Received response content type: $response_content_type\\n\") if $settings_ref->{debug} =~ /True/;\n\n        # judge result and next action based on $response_code\n        if ($response_code >= 200 && $response_code < 300 ) {\n            print('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_body\\n\") if $settings_ref->{debug} =~ /True/;\n\n            # convert from json and put in correct place \n            my $json = JSON->new;\n            $settings_ref->{handle}->{data}->{get} = $json->decode($response_body);\n\n        } else {\n            print('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_code\\n\") if $settings_ref->{debug} =~ /True/;\n        } \n\n    } else {\n        # Error code, type of error, error message\n        print(\"An error happened: $returncode \".$curl->strerror($returncode).\" \".$curl->errbuf.\"\\n\");\n    }\n\n    # Return the results\n    return($returncode, $response_code, $response_content_type );\n}\n\n# Subroutine to get and check all script arguments\nsub get_arguments {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n\n    # Define local variables\n    my %arguments;\n    my $username;\n    my $password;\n    my $baseUri;\n    my $pidUrl;\n    my $credentials;\n    my $handleData;\n    my $type;\n    my $header;\n    my $returncode=0;\n    my $message;\n    my @sources;\n\n    GetOptions( 'h|help'    => \\$arguments{help},\n        'user=s'        => \\$username,\n        'passwd=s'      => \\$password,\n        'base=s'        => \\$baseUri,\n        'pid=s'         => \\$pidUrl,\n        'cred=s'        => \\$credentials,\n        'data=s'        => \\$handleData,\n        'type=s'        => \\$type,\n        'header=s'      => \\$header,\n        'get'           => \\$arguments{get},\n        'put'           => \\$arguments{put},\n        'delete'        => \\$arguments{delete},\n        'post'          => \\$arguments{post},\n        'pretty'        => \\$arguments{pretty},\n        'd|debug'       => \\$arguments{debug},\n    );\n\n    # Check the help flag\n    if( $arguments{help} ) {\n\n        # Set the returncode\n        $returncode=255;\n\n        $message = print_help();\n    }\n    \n    # Check the debug flag\n    if( $arguments{debug} ) {\n\n        $settings_ref->{debug} = 'True';\n        printf('debug is                      : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # Check the pretty flag\n    if( $arguments{pretty} ) {\n\n        $settings_ref->{handle}->{format} = 'pretty';\n        printf('pretty format printing is     : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # Check the action flag's (get,put,delete,post,search,nagios)\n    if( $arguments{get} ) {\n\n        $settings_ref->{handle}->{action} = 'get';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{put} ) {\n\n        $settings_ref->{handle}->{action} = 'put';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{delete} ) {\n\n        $settings_ref->{handle}->{action} = 'delete';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{post} ) {\n\n        $settings_ref->{handle}->{action} = 'post';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the username\n    if( $username ) {\n\n        $settings_ref->{handle}->{credentials}->{username} = $username;\n        printf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the password\n    if( $password ) {\n\n        $settings_ref->{handle}->{credentials}->{password} = $password;\n        printf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the base uri\n    if( $baseUri ) {\n\n        $settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;\n        printf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the pid url\n    if( $pidUrl ) {\n\n        $settings_ref->{handle}->{url}->{pid} = $pidUrl;\n        printf(\"The pid is                    : %s\\n\",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the handle data\n    if( $handleData ) {\n\n        $settings_ref->{handle}->{data}->{putpost} = $handleData;\n        printf(\"The data is                   : %s\\n\",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the type data\n    if( $type ) {\n\n        $settings_ref->{handle}->{type} = $type;\n        printf(\"The type(s) to show is/are    : %s\\n\",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n    \n    # check the header data\n    if( $header ) {\n\n        $settings_ref->{handle}->{headerextra} = $header;\n        printf(\"The extra header info is      : %s\\n\",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the credentials data\n    if( $credentials ) {\n\n        # read the credentials from the file\n        my $filename = $credentials;\n        my $json_text = do {\n            open(my $json_fh, \"<:encoding(UTF-8)\", $filename)  or die(\"Can't open $filename: $!\\n\");\n            local $/;\n            <$json_fh>\n        };\n\n        # convert from json and put in correct place \n        my $json = JSON->new;\n        $settings_ref->{handle}->{credentials} = $json->decode($json_text);\n\n        printf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n        printf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n        printf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n    }\n\n    # Print the message\n    if( $message ) {\n\n        print \"$message\\n\";\n    };\n\n    # Return the results\n    return($returncode);\n\n};\n")))}c.isMDXComponent=!0},58:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(2),s=n(6),a=(n(0),n(123)),i={title:"PHP",parent:"list",order:3},o={unversionedId:"examples/listphp",id:"examples/listphp",isDocsHomePage:!1,title:"PHP",description:"The request in php",source:"@site/docs/examples/listphp.md",slug:"/examples/listphp",permalink:"/doc.pidconsortium.eu/docs/examples/listphp",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/listphp.md",version:"current"},l=[],u={rightToc:l};function c(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in php "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},'$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";\n$PIDSERVICE_USER="YOURUSERNAME";\n$PIDSERVICE_PASSWD="YOURPASSWORD";\n$GETPIDURL ="THE_SERVICE_URL_WITH_PREFIX";\n\n// Get cURL resource\n$curl = curl_init();\n// Set some options - we are passing in a useragent too here\ncurl_setopt($curl,CURLOPT_URL,$GETPIDURL);\n// Set the authentication options\ncurl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);\ncurl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n// Include header in result? (0 = yes, 1 = no)\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// Should cURL return or print out the data? (true = return, false = print)\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n// Download the given URL, and return output\n$output = curl_exec($curl);\n\n$info = curl_getinfo($curl);\nif( $info[\'http_code\']==200) echo "PID DATA";\nif( $info[\'http_code\']==401) echo "Authorization problem";\nif( $info[\'http_code\']==404) echo "Not found";\n\n// Close the cURL resource, and free system resources\ncurl_close($curl);\n')))}c.isMDXComponent=!0},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(2),s=n(6),a=(n(0),n(123)),i={title:"Python",parent:"list",order:2},o={unversionedId:"examples/listpython",id:"examples/listpython",isDocsHomePage:!1,title:"Python",description:"The request in python",source:"@site/docs/examples/listpython.md",slug:"/examples/listpython",permalink:"/doc.pidconsortium.eu/docs/examples/listpython",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/listpython.md",version:"current"},l=[],u={rightToc:l};function c(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in python"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'import urllib.request, urllib.error, urllib.parse\n\nPIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"\nPIDSERVICE_USER="YOURUSERNAME"\nPIDSERVICE_PASSWD="YOURPASSWORD"\nURL_TO_OPEN="THE_SERVICE_URL_WITH_PREFIX"\nDATAURL=\'\';\n\n# create a password manager\npassword_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n\n# Add the username and password.\npassword_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)\n\nhandler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n\n# create "opener" (OpenerDirector instance)\nopener = urllib.request.build_opener(handler)\n\n# use the opener to fetch a URL\nopener.open(PIDSERVICE_URL)\n\n# Install the opener.\n# Now all calls to urllib2.urlopen use the created opener.\nurllib.request.install_opener(opener)\n\nREQUESTDATA = urllib.request.Request(URL_TO_OPEN)\ntry:\n    DATAURL = urllib.request.urlopen(REQUESTDATA)\nexcept urllib.error.URLError as e:\n    if e.code == 404:\n        print("404-Not found")\n    if e.code == 401:\n        print("401-Authentication failed")\n\nif DATAURL:\n    # Getting the code\n    print("This gets the code: ", DATAURL.code)\n\n')))}c.isMDXComponent=!0},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return f})),n.d(t,"metadata",(function(){return m})),n.d(t,"rightToc",(function(){return h})),n.d(t,"default",(function(){return g}));var r=n(2),s=n(6),a=(n(0),n(123)),i=n(56),o=n(57),l=n(58),u=n(59),c=n(50),p=n(127),d=n(128),f={id:"api-list",title:"API - List PID",kind:"code",slug:"list",result:"resultlist"},m={unversionedId:"api-list",id:"api-list",isDocsHomePage:!1,title:"API - List PID",description:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.",source:"@site/docs/api-list.md",slug:"/list",permalink:"/doc.pidconsortium.eu/docs/list",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/api-list.md",version:"current",sidebar:"someSidebar",previous:{title:"Get a PID",permalink:"/doc.pidconsortium.eu/docs/get"},next:{title:"API - Search a PID",permalink:"/doc.pidconsortium.eu/docs/search"}},h=[{value:"List PID - Description",id:"list-pid---description",children:[]},{value:"Example",id:"example",children:[]}],b={rightToc:h};function g(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON."),Object(a.b)("h2",{id:"list-pid---description"},"List PID - Description"),Object(a.b)("p",null,"You can retrieve the list of pids at once, by just supplying the Service Url with the prefix. "),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"Description")),Object(a.b)("td",{parentName:"tr",align:null},"GET a PID")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"URL")),Object(a.b)("td",{parentName:"tr",align:null},"The  API Service URL")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"HTTP Method")),Object(a.b)("td",{parentName:"tr",align:null},"GET")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"Security")),Object(a.b)("td",{parentName:"tr",align:null},"You must authenticate before actually getting all PID.")))),Object(a.b)("p",null,"Because collections can get very lange, they are rendered page by page.\nBy default, you'll only see the first page with at maximum 1000 results.\nTo modify this behaviour, use the following query parameters:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Parameter"),Object(a.b)("th",{parentName:"tr",align:null},"Value"),Object(a.b)("th",{parentName:"tr",align:null},"Description"),Object(a.b)("th",{parentName:"tr",align:null},"Example value"),Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null}))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"limit"),Object(a.b)("td",{parentName:"tr",align:null},"int: the limit of results"),Object(a.b)("td",{parentName:"tr",align:null},"the maximum number of items to return. The default is 1000. As a special case, if you specify ",Object(a.b)("inlineCode",{parentName:"td"},"limit=0"),", ",Object(a.b)("em",null,"all")," items will be returned, without limit."),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("a",{parentName:"td",href:"https://epic.grnet.gr/api/v2/handles/11239/?limit=10"},"https://epic.grnet.gr/api/v2/handles/11239/?limit=10")),Object(a.b)("td",{parentName:"tr",align:null}),Object(a.b)("td",{parentName:"tr",align:null})),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"page"),Object(a.b)("td",{parentName:"tr",align:null},"int: the page of results"),Object(a.b)("td",{parentName:"tr",align:null},"When using limit parameter the returned data are displayed on multiple pages. the number of the page to return. I.e., if you specify ",Object(a.b)("inlineCode",{parentName:"td"},"limit=100&page=3"),", items 201 through 300 will be returned"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("a",{parentName:"td",href:"https://epic.grnet.gr/api/v2/handles/11239/?limit=10&page=2"},"https://epic.grnet.gr/api/v2/handles/11239/?limit=10&page=2")),Object(a.b)("td",{parentName:"tr",align:null}),Object(a.b)("td",{parentName:"tr",align:null})))),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("p",null,"In this example we are going to retrieve the information of all PID in the 11239 prefix URL ",Object(a.b)("a",{parentName:"p",href:"https://epic.grnet.gr/api/v2/handles/11239/"},"https://epic.grnet.gr/api/v2/handles/11239/")),Object(a.b)(p.a,{defaultValue:"curl",values:[{label:"Curl",value:"curl"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Perl",value:"perl"}],mdxType:"Tabs"},Object(a.b)(d.a,{value:"curl",mdxType:"TabItem"},Object(a.b)(i.default,{mdxType:"Curl"})),Object(a.b)(d.a,{value:"python",mdxType:"TabItem"},Object(a.b)(u.default,{mdxType:"Python"})),Object(a.b)(d.a,{value:"php",mdxType:"TabItem"},Object(a.b)(l.default,{mdxType:"PHP"})),Object(a.b)(d.a,{value:"perl",mdxType:"TabItem"},Object(a.b)(o.default,{mdxType:"Perl"}))),Object(a.b)(c.default,{mdxType:"Results"}))}g.isMDXComponent=!0}}]);