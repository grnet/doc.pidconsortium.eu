(window.webpackJsonp=window.webpackJsonp||[]).push([[15,33,34,36,46,49],{123:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var r=t(0),s=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=s.a.createContext({}),c=function(e){var n=s.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return s.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},m=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,b=d["".concat(o,".").concat(m)]||d[m]||p[m]||a;return t?s.a.createElement(b,i(i({ref:n},l),{},{components:t})):s.a.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},124:function(e,n,t){"use strict";function r(e){var n,t,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(s&&(s+=" "),s+=t);else for(n in e)e[n]&&(s&&(s+=" "),s+=n);return s}n.a=function(){for(var e,n,t=0,s="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(s&&(s+=" "),s+=n);return s}},125:function(e,n,t){"use strict";var r=t(0),s=t(126);n.a=function(){var e=Object(r.useContext)(s.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},126:function(e,n,t){"use strict";var r=t(0),s=Object(r.createContext)(void 0);n.a=s},127:function(e,n,t){"use strict";var r=t(0),s=t.n(r),a=t(125),o=t(124),i=t(47),u=t.n(i),l=37,c=39;n.a=function(e){var n=e.block,t=e.children,i=e.defaultValue,d=e.values,p=e.groupId,m=e.className,b=Object(a.a)(),f=b.tabGroupChoices,h=b.setTabGroupChoices,g=Object(r.useState)(i),$=g[0],T=g[1],O=Object(r.useState)(!1),y=O[0],_=O[1];if(null!=p){var E=f[p];null!=E&&E!==$&&d.some((function(e){return e.value===E}))&&T(E)}var j=function(e){T(e),null!=p&&h(p,e)},D=[],P=function(e){e.metaKey||e.altKey||e.ctrlKey||_(!0)},v=function(){_(!1)};return Object(r.useEffect)((function(){return window.addEventListener("keydown",P),window.addEventListener("mousedown",v),function(){window.removeEventListener("keydown",P),window.removeEventListener("mousedown",v)}}),[]),s.a.createElement("div",null,s.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":n},m)},d.map((function(e){var n=e.value,t=e.label;return s.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":$===n,className:Object(o.a)("tabs__item",u.a.tabItem,{"tabs__item--active":$===n}),style:y?{}:{outline:"none"},key:n,ref:function(e){return D.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case c:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case l:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(D,e.target,e),P(e)},onFocus:function(){return j(n)},onClick:function(){j(n),_(!1)},onPointerDown:function(){return _(!1)}},t)}))),s.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter((function(e){return e.props.value===$}))[0]))}},128:function(e,n,t){"use strict";var r=t(0),s=t.n(r);n.a=function(e){return s.a.createElement("div",null,e.children)}},62:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return c}));var r=t(2),s=t(6),a=(t(0),t(123)),o={title:"Curl",parent:"delete",order:1},i={unversionedId:"examples/deletecurl",id:"examples/deletecurl",isDocsHomePage:!1,title:"Curl",description:"The request in curl",source:"@site/docs/examples/deletecurl.md",slug:"/examples/deletecurl",permalink:"/doc.pidconsortium.eu/docs/examples/deletecurl",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/deletecurl.md",version:"current"},u=[],l={rightToc:u};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in curl"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X DELETE https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5\n')))}c.isMDXComponent=!0},63:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return c}));var r=t(2),s=t(6),a=(t(0),t(123)),o={title:"Perl",parent:"delete",order:4},i={unversionedId:"examples/deleteperl",id:"examples/deleteperl",isDocsHomePage:!1,title:"Perl",description:"The request in perl",source:"@site/docs/examples/deleteperl.md",slug:"/examples/deleteperl",permalink:"/doc.pidconsortium.eu/docs/examples/deleteperl",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/deleteperl.md",version:"current"},u=[],l={rightToc:u};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in perl"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-perl"},"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Getopt::Long;\nuse Switch 'Perl5', 'Perl6';\nuse JSON;\nuse WWW::Curl::Easy;\n\nmy $fullargv0 = $0;\nmy ($argv0) = $fullargv0 =~ /([^\\/\\\\]+)$/;\n\nmy %settings = (\n'debug' => 'False',\n'handle' => {\n    'action' =>'delete',\n    'credentials'   =>  {\n        'username'  => 'empty',\n        'password'  => 'empty',\n        'baseuri'   => 'empty',\n    },\n    'data'  =>{\n        'get'   => '',\n        'putpost'=> '',\n    },\n    'format' => 'none',\n    'headerextra'   => '',\n    'type' => 'none',\n    'url'=> {\n        'pid'=> '',\n    },\n},\n);\n\n# Main subroutine\nsub main {\n\n    #Get the subroutine arguments\n    my $settings_ref = shift;\n\n    # Get the script arguments\n    (my $returncode) = get_arguments($settings_ref);\n\n    if( $returncode == 0 ) \n        performDelete($settings_ref); \n\n    return($returncode);\n}\n \n# Subroutine to perform a DELETE action\nsub performDelete {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n\n    #construct url\n    my $url=\"$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}\";\n    printf(\"The constructed url is        : %s\\n\",$url) if $settings_ref->{debug} =~ /True/ ;\n\n    # perform action\n    (my $returncode, my $response_code, my $response_content_type ) = httpDelete($settings_ref, $url );\n\n    # Looking at the results of the curl request\n    if ($returncode == 0) {\n        print('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n        # judge result and next action based on $response_code\n        if ($response_code >= 200 && $response_code < 300 ) {\n            print('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n        } else {\n            print('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_code\\n\");\n        } \n\n    } else {\n        print('An error happened\\n');\n    }\n}\n# reader helper calback function\nsub read_callback {\n    my ($maxlength,$pointer)=@_;\n    # printf(\"The MAXLENGTH is     : \\n\", $maxlength);\n    # printf(\"The POINTER is       : \\n\", $$pointer) ;\n    my $data = $$pointer;\n    $$pointer = \"\";\n    return $data;\n}\n\n# Subroutine delete via a http DELETE\nsub httpDelete {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n    my $url = shift;\n\n    print('Entering httpDelete           :\\n')         if $settings_ref->{debug} =~ /True/;\n\n    # local varables\n    my $body = \"\";\n    my $header = \"\";\n    my $response_code;\n    my $response_content_type;\n\n    my $curl = WWW::Curl::Easy->new;\n\n    # set options for the curl http request\n    $curl->setopt(CURLOPT_HEADER, 0);\n    $curl->setopt(CURLOPT_NOBODY, 1);\n    $curl->setopt(CURLOPT_CUSTOMREQUEST, 'DELETE');\n    $curl->setopt(CURLOPT_URL, $url);\n    $curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});\n    $curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});\n\n    #debugging\n    #$curl->setopt (CURLOPT_VERBOSE, 1);\n\n    # Do the actual curl http request\n    my $returncode = $curl->perform;\n\n    # Looking at the results of the curl request\n    if ($returncode == 0) {\n        print('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n        $response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);\n        $response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);\n        print(\"Received response code        : $response_code\\n\")         if $settings_ref->{debug} =~ /True/;\n        print(\"Received response content type: $response_content_type\\n\") if $settings_ref->{debug} =~ /True/;\n\n        # judge result and next action based on $response_code\n        if ($response_code >= 200 && $response_code < 300 ) {\n            print('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n        } else {\n            print('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_code\\n\") if $settings_ref->{debug} =~ /True/ ;\n        } \n\n    } else {\n        # Error code, type of error, error message\n        print(\"An error happened: $returncode \".$curl->strerror($returncode).\" \".$curl->errbuf.\"\\n\");\n    }\n\n    # Return the results\n    return($returncode, $response_code, $response_content_type );\n}\n# Subroutine to get and check all script arguments\nsub get_arguments {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n\n    # Define local variables\n    my %arguments;\n    my $username;\n    my $password;\n    my $baseUri;\n    my $pidUrl;\n    my $credentials;\n    my $handleData;\n    my $type;\n    my $header;\n    my $returncode=0;\n    my $message;\n    my @sources;\n\n    GetOptions( 'h|help'    => \\$arguments{help},\n        'user=s'        => \\$username,\n        'passwd=s'      => \\$password,\n        'base=s'        => \\$baseUri,\n        'pid=s'         => \\$pidUrl,\n        'cred=s'        => \\$credentials,\n        'data=s'        => \\$handleData,\n        'type=s'        => \\$type,\n        'header=s'      => \\$header,\n        'get'           => \\$arguments{get},\n        'put'           => \\$arguments{put},\n        'delete'        => \\$arguments{delete},\n        'post'          => \\$arguments{post},\n        'pretty'        => \\$arguments{pretty},\n        'd|debug'       => \\$arguments{debug},\n    );\n\n    # Check the help flag\n    if( $arguments{help} ) {\n\n        # Set the returncode\n        $returncode=255;\n\n        $message = print_help();\n    }\n    \n    # Check the debug flag\n    if( $arguments{debug} ) {\n\n        $settings_ref->{debug} = 'True';\n        printf('debug is                      : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # Check the pretty flag\n    if( $arguments{pretty} ) {\n\n        $settings_ref->{handle}->{format} = 'pretty';\n        printf('pretty format printing is     : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # Check the action flag's (get,put,delete,post,search,nagios)\n    if( $arguments{get} ) {\n\n        $settings_ref->{handle}->{action} = 'get';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{put} ) {\n\n        $settings_ref->{handle}->{action} = 'put';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{delete} ) {\n\n        $settings_ref->{handle}->{action} = 'delete';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{post} ) {\n\n        $settings_ref->{handle}->{action} = 'post';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the username\n    if( $username ) {\n\n        $settings_ref->{handle}->{credentials}->{username} = $username;\n        printf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the password\n    if( $password ) {\n\n        $settings_ref->{handle}->{credentials}->{password} = $password;\n        printf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the base uri\n    if( $baseUri ) {\n\n        $settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;\n        printf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the pid url\n    if( $pidUrl ) {\n\n        $settings_ref->{handle}->{url}->{pid} = $pidUrl;\n        printf(\"The pid is                    : %s\\n\",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the handle data\n    if( $handleData ) {\n\n        $settings_ref->{handle}->{data}->{putpost} = $handleData;\n        printf(\"The data is                   : %s\\n\",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the type data\n    if( $type ) {\n\n        $settings_ref->{handle}->{type} = $type;\n        printf(\"The type(s) to show is/are    : %s\\n\",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n    \n    # check the header data\n    if( $header ) {\n\n        $settings_ref->{handle}->{headerextra} = $header;\n        printf(\"The extra header info is      : %s\\n\",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the credentials data\n    if( $credentials ) {\n\n        # read the credentials from the file\n        my $filename = $credentials;\n        my $json_text = do {\n            open(my $json_fh, \"<:encoding(UTF-8)\", $filename)  or die(\"Can't open $filename: $!\\n\");\n            local $/;\n            <$json_fh>\n        };\n\n        # convert from json and put in correct place \n        my $json = JSON->new;\n        $settings_ref->{handle}->{credentials} = $json->decode($json_text);\n\n        printf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n        printf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n        printf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n    }\n\n    # Print the message\n    if( $message ) {\n\n        print \"$message\\n\";\n    };\n\n    # Return the results\n    return($returncode);\n\n};\n")))}c.isMDXComponent=!0},64:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return c}));var r=t(2),s=t(6),a=(t(0),t(123)),o={title:"PHP",parent:"delete",order:3},i={unversionedId:"examples/deletephp",id:"examples/deletephp",isDocsHomePage:!1,title:"PHP",description:"The request in php",source:"@site/docs/examples/deletephp.md",slug:"/examples/deletephp",permalink:"/doc.pidconsortium.eu/docs/examples/deletephp",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/deletephp.md",version:"current"},u=[],l={rightToc:u};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in php "),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-php"},'$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";\n$PIDSERVICE_USER="YOURUSERNAME";\n$PIDSERVICE_PASSWD="YOURPASSWORD";\n$HANDLENAME="05C3DB56-5692-11E3-AF8F-1C6F65A666B5";\n$PIDTODELETE= $PIDSERVICE_URL.$HANDLENAME;\n// Get cURL resource\n$curl = curl_init();\n\n// Set the url to authenticate\ncurl_setopt($curl,CURLOPT_URL,$PIDTODELETE);\n// Set the authentication options\ncurl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);\ncurl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n//set the DELETE action\ncurl_setopt($curl, CURLOPT_CUSTOMREQUEST, "DELETE");\n\n// Include header in result? (0 = yes, 1 = no)\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// Should cURL return or print out the data? (true = return, false = print)\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n// Download the given URL, and return output\n$output = curl_exec($curl);\n$info = curl_getinfo($curl);\nif( $info[\'http_code\']==204) echo "The PID was successfully deleted";\nif( $info[\'http_code\']==401) echo "Authorization failed: Either your login or your password is wrong.";\nif( $info[\'http_code\']==403) echo "HTTP/1.1 403 Forbidden: The operation is not permitted.<br/>";\nif( $info[\'http_code\']==405) echo "HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong<br/>";\n\n// Close the cURL resource, and free system resources\ncurl_close($curl);\n')))}c.isMDXComponent=!0},65:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return c}));var r=t(2),s=t(6),a=(t(0),t(123)),o={title:"Python",parent:"delete",order:2},i={unversionedId:"examples/deletepython",id:"examples/deletepython",isDocsHomePage:!1,title:"Python",description:"The request in python",source:"@site/docs/examples/deletepython.md",slug:"/examples/deletepython",permalink:"/doc.pidconsortium.eu/docs/examples/deletepython",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/deletepython.md",version:"current"},u=[],l={rightToc:u};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The request in python"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-python"},'import urllib.request, urllib.error, urllib.parse\n\nPIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"\nPIDSERVICE_USER="YOURUSERNAME"\nPIDSERVICE_PASSWD="YOURPASSWORD"\nHANDLENAME="05C3DB56-5692-11E3-AF8F-1C6F65A666B5"\nURL_TO_OPEN=PIDSERVICE_URL+HANDLENAME\nDATAURL=""\n\n# create a password manager\npassword_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n\n# Add the username and password.\npassword_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)\n\nhandler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n\n# create "opener" (OpenerDirector instance)\nopener = urllib.request.build_opener(handler)\n\n# use the opener to fetch a URL\nopener.open(URL_TO_OPEN)\n\n# Install the opener.\n# Now all calls to urllib2.urlopen use our opener.\nurllib.request.install_opener(opener)\n\n#http://stackoverflow.com/questions/2407126/python-urllib2-basic-auth-problem\nREQUESTDATA = urllib.request.Request(URL_TO_OPEN)\n# creates the delete method\nREQUESTDATA.get_method = lambda: \'DELETE\'\n\ntry:\n        DATAURL = urllib.request.urlopen(REQUESTDATA)\nexcept urllib.error.URLError as e:\n        if e.code == 404:\n                print("404-Not found")\n        if e.code == 401:\n                print("401-Authentication failed")\n        if e.code == 403:\n                print("403-Not permitted")\n')))}c.isMDXComponent=!0},66:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return c}));var r=t(2),s=t(6),a=(t(0),t(123)),o={title:"Search Results",parent:"resultdelete",order:1},i={unversionedId:"examples/deleteres",id:"examples/deleteres",isDocsHomePage:!1,title:"Search Results",description:"The response:",source:"@site/docs/examples/deleteres.md",slug:"/examples/deleteres",permalink:"/doc.pidconsortium.eu/docs/examples/deleteres",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/deleteres.md",version:"current"},u=[{value:"The response:",id:"the-response",children:[]}],l={rightToc:u};function c(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"the-response"},"The response:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 204 No Content: (Success)"),Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 401 Unauthorized: Your username or your password is wrong"),Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 404 Not found: The resource doesn't exist"),Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 403 Forbidden: The operation is not permitted"),Object(a.b)("li",{parentName:"ul"},"HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"> DELETE /handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5 HTTP/1.1\n> Authorization: Basic Y2xhcmluLWVsOjUxMjdkZWIxZTJjNg==\n> User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3\n> Host: epic.grnet.gr\n> Accept:application/json\n> Content-Type:application/json\n>\n< HTTP/1.1 204 No Content\n< Date: Fri, 22 Nov 2013 13:05:14 GMT\n< Content-Length: 0\n")))}c.isMDXComponent=!0},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return m})),t.d(n,"metadata",(function(){return b})),t.d(n,"rightToc",(function(){return f})),t.d(n,"default",(function(){return g}));var r=t(2),s=t(6),a=(t(0),t(123)),o=t(62),i=t(63),u=t(64),l=t(65),c=t(66),d=t(127),p=t(128),m={id:"api-delete",title:"API - Delete a PID",kind:"code",slug:"delete",result:"resultdelete"},b={unversionedId:"api-delete",id:"api-delete",isDocsHomePage:!1,title:"API - Delete a PID",description:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.",source:"@site/docs/api-delete.md",slug:"/delete",permalink:"/doc.pidconsortium.eu/docs/delete",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/api-delete.md",version:"current",sidebar:"someSidebar",previous:{title:"API - Update an existing PID",permalink:"/doc.pidconsortium.eu/docs/api-update"},next:{title:"API - Part Identifiers",permalink:"/doc.pidconsortium.eu/docs/api-partial"}},f=[{value:"DELETE a PID - Description",id:"delete-a-pid---description",children:[]},{value:"Example",id:"example",children:[]}],h={rightToc:f};function g(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},h,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON."),Object(a.b)("h2",{id:"delete-a-pid---description"},"DELETE a PID - Description"),Object(a.b)("p",null,"You may want to delete a defined PID. Once you have the PID url, then you can delete the PID, by just supplying it. "),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"At the moment a nodelete profile is enforced. So the deletion of handles is deactivated.")),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"Description")),Object(a.b)("td",{parentName:"tr",align:null},"Delete a PID")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"URL")),Object(a.b)("td",{parentName:"tr",align:null},"The  API Service URL with the PID")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"HTTP Method")),Object(a.b)("td",{parentName:"tr",align:null},"DELETE")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},"Security")),Object(a.b)("td",{parentName:"tr",align:null},"Requires ownership of the PID. So you must authenticate before actually deleting the file")))),Object(a.b)("p",null,"The data you must send in order to delete are described in the following table "),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Type"),Object(a.b)("th",{parentName:"tr",align:null},"Description"),Object(a.b)("th",{parentName:"tr",align:null},"Required"),Object(a.b)("th",{parentName:"tr",align:null},"Default value"),Object(a.b)("th",{parentName:"tr",align:null},"Example value"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"suffix"),Object(a.b)("td",{parentName:"tr",align:null},"The local name of the handle in the system"),Object(a.b)("td",{parentName:"tr",align:null},"Yes"),Object(a.b)("td",{parentName:"tr",align:null},"None"),Object(a.b)("td",{parentName:"tr",align:null},"05C3DB56-5692-11E3-AF8F-1C6F65A666B5")))),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("p",null,"In this example we are going to delete of a selected PID ",Object(a.b)("a",{parentName:"p",href:"https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5"},"https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5")),Object(a.b)(d.a,{defaultValue:"curl",values:[{label:"Curl",value:"curl"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Perl",value:"perl"}],mdxType:"Tabs"},Object(a.b)(p.a,{value:"curl",mdxType:"TabItem"},Object(a.b)(o.default,{mdxType:"Curl"})),Object(a.b)(p.a,{value:"python",mdxType:"TabItem"},Object(a.b)(l.default,{mdxType:"Python"})),Object(a.b)(p.a,{value:"php",mdxType:"TabItem"},Object(a.b)(u.default,{mdxType:"PHP"})),Object(a.b)(p.a,{value:"perl",mdxType:"TabItem"},Object(a.b)(i.default,{mdxType:"Perl"}))),Object(a.b)(c.default,{mdxType:"Results"}))}g.isMDXComponent=!0}}]);