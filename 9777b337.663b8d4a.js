(window.webpackJsonp=window.webpackJsonp||[]).push([[45,6,33,36,39,63],{112:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return h})),t.d(n,"metadata",(function(){return f})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return g}));var r=t(2),a=t(6),s=(t(0),t(125)),i=t(75),o=t(81),c=t(79),l=t(51),u=t(74),p=t(129),d=t(130),h={id:"api-search",title:"API - Search a PID",kind:"code",slug:"search",result:"resultsearch"},f={unversionedId:"api-search",id:"api-search",isDocsHomePage:!1,title:"API - Search a PID",description:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.",source:"@site/docs/api-search.md",slug:"/search",permalink:"/docs/search",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/api-search.md",version:"current",sidebar:"someSidebar",previous:{title:"API - List PID",permalink:"/docs/list"},next:{title:"API - Create a new PID",permalink:"/docs/create"}},b=[{value:"Search a PID - Description",id:"search-a-pid---description",children:[]},{value:"Example",id:"example",children:[]}],m={rightToc:b};function g(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},m,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON."),Object(s.b)("h2",{id:"search-a-pid---description"},"Search a PID - Description"),Object(s.b)("p",null,"You can search for a PID by using a term. "),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Type"),Object(s.b)("th",{parentName:"tr",align:null},"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},"Description")),Object(s.b)("td",{parentName:"tr",align:null},"Search a PID")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},"URL")),Object(s.b)("td",{parentName:"tr",align:null},"The  ePIC API Url+?PARAMETER=","*","term","*")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},"HTTP Method")),Object(s.b)("td",{parentName:"tr",align:null},"GET")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},"Security")),Object(s.b)("td",{parentName:"tr",align:null},"You must authenticate before actually getting this information.")))),Object(s.b)("p",null,"The parameters you may use for a search request are described in the following table:"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Parameter"),Object(s.b)("th",{parentName:"tr",align:null},"Value"),Object(s.b)("th",{parentName:"tr",align:null},"Description"),Object(s.b)("th",{parentName:"tr",align:null},"Example value"),Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null}))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"INST"),Object(s.b)("td",{parentName:"tr",align:null},"string: name of the INST"),Object(s.b)("td",{parentName:"tr",align:null},"Search and get the list of PIDs registered by an institute"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("a",{parentName:"td",href:"https://epic.grnet.gr/api/v2/handles/11239/?INST=GRNET"},"https://epic.grnet.gr/api/v2/handles/11239/?INST=GRNET")),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"URL"),Object(s.b)("td",{parentName:"tr",align:null},"string: the url you are searching for"),Object(s.b)("td",{parentName:"tr",align:null},"Search and get the PID of an object with the selected url"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("a",{parentName:"td",href:"https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr"},"https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr")),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"limit"),Object(s.b)("td",{parentName:"tr",align:null},"int: the limit of results"),Object(s.b)("td",{parentName:"tr",align:null},"Limit your results"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("a",{parentName:"td",href:"https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&limit=10"},"https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&limit=10")),Object(s.b)("td",{parentName:"tr",align:null}),Object(s.b)("td",{parentName:"tr",align:null})))),Object(s.b)("h4",{id:"you-may-also"},"You may also:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"combine the parameters to get the list of PIDs. (e.g. ",Object(s.b)("a",{parentName:"li",href:"https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&INST=GRNET"},"https://epic.grnet.gr/api/v2/handles/11239/?URL=http://www.grnet.gr&INST=GRNET"),")."),Object(s.b)("li",{parentName:"ul"},'use part of the term in the search parameter (e.g. search for PIDS that contain "grnet" in the URL ',Object(s.b)("a",{parentName:"li",href:"https://epic.grnet.gr/api/v2/handles/11239/?URL=%5C*grnet%5C*"},"https://epic.grnet.gr/api/v2/handles/11239/?URL=\\*grnet\\*"),").")),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("p",null,"In this example we are going to use the term  to retrieve the list of PIDs with the following URL ",Object(s.b)("a",{parentName:"p",href:"https://epic.grnet.gr/api/v2/handles/11239/?URL=%5C*GRNET%5C"},"https://epic.grnet.gr/api/v2/handles/11239/?URL=\\*GRNET\\"),"*"),Object(s.b)(p.a,{defaultValue:"curl",values:[{label:"Curl",value:"curl"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Perl",value:"perl"}],mdxType:"Tabs"},Object(s.b)(d.a,{value:"curl",mdxType:"TabItem"},Object(s.b)(i.default,{mdxType:"Curl"})),Object(s.b)(d.a,{value:"python",mdxType:"TabItem"},Object(s.b)(l.default,{mdxType:"Python"})),Object(s.b)(d.a,{value:"php",mdxType:"TabItem"},Object(s.b)(c.default,{mdxType:"PHP"})),Object(s.b)(d.a,{value:"perl",mdxType:"TabItem"},Object(s.b)(o.default,{mdxType:"Perl"}))),Object(s.b)(u.default,{mdxType:"Results"}))}g.isMDXComponent=!0},125:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},h=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(t),h=r,f=p["".concat(i,".").concat(h)]||p[h]||d[h]||s;return t?a.a.createElement(f,o(o({ref:n},l),{},{components:t})):a.a.createElement(f,o({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=h;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},126:function(e,n,t){"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}n.a=function(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}},127:function(e,n,t){"use strict";var r=t(0),a=t(128);n.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},128:function(e,n,t){"use strict";var r=t(0),a=Object(r.createContext)(void 0);n.a=a},129:function(e,n,t){"use strict";var r=t(0),a=t.n(r),s=t(127),i=t(126),o=t(47),c=t.n(o),l=37,u=39;n.a=function(e){var n=e.block,t=e.children,o=e.defaultValue,p=e.values,d=e.groupId,h=e.className,f=Object(s.a)(),b=f.tabGroupChoices,m=f.setTabGroupChoices,g=Object(r.useState)(o),$=g[0],y=g[1],_=Object(r.useState)(!1),T=_[0],O=_[1];if(null!=d){var j=b[d];null!=j&&j!==$&&p.some((function(e){return e.value===j}))&&y(j)}var R=function(e){y(e),null!=d&&m(d,e)},v=[],E=function(e){e.metaKey||e.altKey||e.ctrlKey||O(!0)},N=function(){O(!1)};return Object(r.useEffect)((function(){return window.addEventListener("keydown",E),window.addEventListener("mousedown",N),function(){window.removeEventListener("keydown",E),window.removeEventListener("mousedown",N)}}),[]),a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":n},h)},p.map((function(e){var n=e.value,t=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":$===n,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":$===n}),style:T?{}:{outline:"none"},key:n,ref:function(e){return v.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case u:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case l:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(v,e.target,e),E(e)},onFocus:function(){return R(n)},onClick:function(){R(n),O(!1)},onPointerDown:function(){return O(!1)}},t)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter((function(e){return e.props.value===$}))[0]))}},130:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){return a.a.createElement("div",null,e.children)}},51:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),s=(t(0),t(125)),i={title:"Python",parent:"search",order:2},o={unversionedId:"examples/searchpython",id:"examples/searchpython",isDocsHomePage:!1,title:"Python",description:"The request in python",source:"@site/docs/examples/searchpython.md",slug:"/examples/searchpython",permalink:"/docs/examples/searchpython",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/searchpython.md",version:"current"},c=[],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The request in python"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-python"},'import urllib.request, urllib.error, urllib.parse\n\nPIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"\nPIDSERVICE_USER="YOURUSERNAME"\nPIDSERVICE_PASSWD="YOURPASSWORD"\nURL_TO_OPEN=PIDSERVICE_URL+"?URL=*grnet*"\nDATAURL=""\n\n# create a password manager\npassword_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n\n# Add the username and password.\npassword_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)\n\nhandler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n\n# create "opener" (OpenerDirector instance)\nopener = urllib.request.build_opener(handler)\n\n# use the opener to fetch a URL\nopener.open(PIDSERVICE_URL)\n\n# Install the opener.\n# Now all calls to urllib2.urlopen use the created opener.\nurllib.request.install_opener(opener)\n\nREQUESTDATA = urllib.request.Request(URL_TO_OPEN)\ntry:\n    DATAURL = urllib.request.urlopen(REQUESTDATA)\nexcept urllib.error.URLError as e:\n    if e.code == 404:\n        print("404-Not found")\n    if e.code == 401:\n        print("401-Authentication failed")\n\nif DATAURL:\n    # Getting the code\n    print("This gets the code: ", DATAURL.code)\n\n')))}u.isMDXComponent=!0},74:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),s=(t(0),t(125)),i={title:"Search Results",parent:"resultsearch",order:1},o={unversionedId:"examples/searchres",id:"examples/searchres",isDocsHomePage:!1,title:"Search Results",description:"The response:",source:"@site/docs/examples/searchres.md",slug:"/examples/searchres",permalink:"/docs/examples/searchres",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/searchres.md",version:"current"},c=[{value:"The response:",id:"the-response",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h3",{id:"the-response"},"The response:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"HTTP/1.1 200 OK: (Success)"),Object(s.b)("li",{parentName:"ul"},"HTTP/1.1 401 Unauthorized: Your username or your password is wrong"),Object(s.b)("li",{parentName:"ul"},"HTTP/1.1 404 NOT found: The url doesn't exist")),Object(s.b)("p",null,"After a successful request, the response consists of a list of PIDs containing this term."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"GRNET\n66742AB2-5685-11E3-A413-1C6F65A666B5\n305F66A9-3994-42D6-A9F6-8E629126DE14\nB4CF7AEA-55BB-4DB5-9D85-EB2DAD821B07\n0CEEA495-71FA-460B-97A4-81E7E597B636\n")))}u.isMDXComponent=!0},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),s=(t(0),t(125)),i={title:"Curl",parent:"search",order:1},o={unversionedId:"examples/searchcurl",id:"examples/searchcurl",isDocsHomePage:!1,title:"Curl",description:"The request in curl",source:"@site/docs/examples/searchcurl.md",slug:"/examples/searchcurl",permalink:"/docs/examples/searchcurl",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/searchcurl.md",version:"current"},c=[],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The request in curl"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-curl"},'curl -D- -u "YOURUSERNAME:YOURPASSWORD" -X GET -H "Content-Type: application/json" https://epic.grnet.gr/api/v2/handles/11239/?URL=*grnet*\n')))}u.isMDXComponent=!0},79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),s=(t(0),t(125)),i={title:"PHP",parent:"search",order:3},o={unversionedId:"examples/searchphp",id:"examples/searchphp",isDocsHomePage:!1,title:"PHP",description:"The request in php",source:"@site/docs/examples/searchphp.md",slug:"/examples/searchphp",permalink:"/docs/examples/searchphp",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/searchphp.md",version:"current"},c=[],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The request in php "),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-php"},'$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";\n$PIDSERVICE_USER="YOURUSERNAME";\n$PIDSERVICE_PASSWD="YOURPASSWORD";\n$SEARCHTERM = "grnet";\n$GETPIDURL =$PIDSERVICE_URL."?URL=*".$SEARCHTERM."*";\n\n// Get cURL resource\n$curl = curl_init();\n// Set some options - we are passing in a useragent too here\ncurl_setopt($curl,CURLOPT_URL,$GETPIDURL);\n// Set the authentication options\ncurl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);\ncurl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n// Include header in result? (0 = yes, 1 = no)\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// Should cURL return or print out the data? (true = return, false = print)\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n// Download the given URL, and return output\n$output = curl_exec($curl);\n\n$info = curl_getinfo($curl);\nif( $info[\'http_code\']==200) echo "PID DATA";\nif( $info[\'http_code\']==401) echo "Authorization problem";\nif( $info[\'http_code\']==404) echo "Not found";\n\n// Close the cURL resource, and free system resources\ncurl_close($curl);\n')))}u.isMDXComponent=!0},81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),s=(t(0),t(125)),i={title:"Perl",parent:"search",order:4},o={unversionedId:"examples/searchperl",id:"examples/searchperl",isDocsHomePage:!1,title:"Perl",description:"The request in perl",source:"@site/docs/examples/searchperl.md",slug:"/examples/searchperl",permalink:"/docs/examples/searchperl",editUrl:"https://github.com/grnet/doc.pidconsortium.eu/docs/examples/searchperl.md",version:"current"},c=[],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"The request in perl"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-perl"},"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Getopt::Long;\nuse Switch 'Perl5', 'Perl6';\nuse JSON;\nuse WWW::Curl::Easy;\n\nmy $fullargv0 = $0;\nmy ($argv0) = $fullargv0 =~ /([^\\/\\\\]+)$/;\n\n\x3c!---\nmy %settings = (\n'debug' => 'False',\n'handle' => {\n    'action' =>'get',\n    'credentials'   =>  {\n        'username'  => 'empty',\n        'password'  => 'empty',\n        'baseuri'   => 'empty',\n    },\n    'data'  =>{\n        'get'   => '',\n        'putpost'=> '',\n    },\n    'format' => 'none',\n    'headerextra'   => '',\n    'type' => 'none',\n    'url'=> {\n        'pid'=> '',\n        'searchby'=> 'url=*grnet*',\n    },\n},\n);\n--\x3e\n\n# Main subroutine\nsub main {\n\n    #Get the subroutine arguments\n    my $settings_ref = shift;\n\n    # Get the script arguments\n    (my $returncode) = get_arguments($settings_ref);\n\n    if( $returncode == 0 ) \n        performGet($settings_ref); \n\n    return($returncode);\n}\n \n# Subroutine to perform a GET action\nsub performGet {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n\n    #construct url and headers\n    my $url=\"$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{credentials}->{url}->{searchby}\";\n    printf(\"The constructed url is        : %s\\n\",$url) if $settings_ref->{debug} =~ /True/ ;\n    my @httpHeaders = ('Accept: application/json' ) ;\n    push(@httpHeaders, \"$settings_ref->{handle}->{headerextra}\" ) if $settings_ref->{handle}->{headerextra} ;\n\n    # perform action\n    (my $returncode, my $response_code, my $response_content_type ) = httpGet($settings_ref, $url, \\@httpHeaders);\n\n    # Looking at the results of the curl request\n    if ($returncode == 0) {\n        print('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n        # judge result and next action based on $response_code\n        if ($response_code >= 200 && $response_code < 300 ) {\n            print('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print Dumper $settings_ref->{handle}->{data}->{get} if $settings_ref->{debug} =~ /True/ ;\n\n            # show only types we want to show. implicit is that we than only show type and parsed_data\n            unless ( $settings_ref->{handle}->{type} =~ /none/ ) {\n\n                if (ref($settings_ref->{handle}->{data}->{get}) eq 'ARRAY') {\n                    print \"We have an array of hashes \\n\" if $settings_ref->{debug} =~ /True/ ;\n\n                    # grep so we have only the hashes with the selected fields\n                    @{$settings_ref->{handle}->{data}->{get}} = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @{$settings_ref->{handle}->{data}->{get}} ; \n                    print Dumper @{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;\n\n                    # delete items from retrieved handle which are not type and parsed_data\n                    for my $hash ( @{$settings_ref->{handle}->{data}->{get}}) {\n                        foreach my $key ( keys %$hash ) {           \n                            print \"key: $key, value: $hash->{$key}\\n\" if $settings_ref->{debug} =~ /True/ ;\n                            unless ( $key =~ /^type|^parsed_data/ ) {\n                                delete $hash->{$key};\n                            }\n                        }   \n                    }\n                } else {\n                    print \"We have a hash of arrays of hashes \\n\" if  $settings_ref->{debug} =~ /True/ ;\n                    # grep so we have only the hashes with the selected fields\n                    for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { \n                        @$array = grep {$_->{type} =~ /$settings_ref->{handle}->{type}/ } @$array ;\n                    } \n                    print Dumper %{$settings_ref->{handle}->{data}->{get}} if $settings_ref->{debug} =~ /True/ ;\n\n                    # delete items from retrieved handle which are not type and parsed_data\n                    for my $array (values(%{$settings_ref->{handle}->{data}->{get}})) { \n                        for my $hash ( @$array ) {\n                            foreach my $key ( keys %$hash ) {           \n                                print \"key: $key, value: $hash->{$key}\\n\" if $settings_ref->{debug} =~ /True/ ;\n                                unless ( $key =~ /^type|^parsed_data/ ) {\n                                    delete $hash->{$key};\n                                }\n                            }\n                        }   \n                    }\n                }\n            }\n\n            # print the data in json format, pretty if the parameter is set\n            my $json = JSON->new;\n            my $json_printed;\n            if ( $settings_ref->{handle}->{format} =~ /pretty/ ) {\n                $json_printed = $json->pretty->encode( $settings_ref->{handle}->{data}->{get} );\n            } else {\n                $json_printed = $json->encode( $settings_ref->{handle}->{data}->{get} );\n            }\n            print(\"$json_printed\\n\");\n\n        } else {\n            print('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_code\\n\");\n        } \n\n    } else {\n        print('An error happened\\n');\n    }\n}\n\n# Subroutine to retrieve data via a http GET\nsub httpGet {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n    my $url = shift;\n    my $httpHeaders_ref = shift;\n\n    print('Entering httpGet              :\\n')         if $settings_ref->{debug} =~ /True/;\n\n    # local varables\n    my $response_body;\n    my $response_code;\n    my $response_content_type;\n\n    my $curl = WWW::Curl::Easy->new;\n\n    # set options for the curl http request\n    $curl->setopt(CURLOPT_HEADER, 0);\n    $curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );\n    $curl->setopt(CURLOPT_URL, $url);\n    $curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});\n    $curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});\n\n    # A filehandle, reference to a scalar or reference to a typeglob can be used here.\n    open my $fh, '>', \\$response_body or die \"$!\";\n    $curl->setopt(CURLOPT_WRITEDATA, $fh);\n\n    # Do the actual curl http request\n    my $returncode = $curl->perform;\n\n    # close file handle\n    close($fh);\n\n    # Looking at the results of the curl request\n    if ($returncode == 0) {\n        print('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n        $response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);\n        $response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);\n        print(\"Received response code        : $response_code\\n\")         if $settings_ref->{debug} =~ /True/;\n        print(\"Received response content type: $response_content_type\\n\") if $settings_ref->{debug} =~ /True/;\n\n        # judge result and next action based on $response_code\n        if ($response_code >= 200 && $response_code < 300 ) {\n            print('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_body\\n\") if $settings_ref->{debug} =~ /True/;\n\n            # convert from json and put in correct place \n            my $json = JSON->new;\n            $settings_ref->{handle}->{data}->{get} = $json->decode($response_body);\n\n        } else {\n            print('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n            print(\"$response_code\\n\") if $settings_ref->{debug} =~ /True/;\n        } \n\n    } else {\n        # Error code, type of error, error message\n        print(\"An error happened: $returncode \".$curl->strerror($returncode).\" \".$curl->errbuf.\"\\n\");\n    }\n\n    # Return the results\n    return($returncode, $response_code, $response_content_type );\n}\n\n# Subroutine to get and check all script arguments\nsub get_arguments {\n\n    # Get the subroutine arguments\n    my $settings_ref = shift;\n\n    # Define local variables\n    my %arguments;\n    my $username;\n    my $password;\n    my $baseUri;\n    my $pidUrl;\n    my $credentials;\n    my $handleData;\n    my $type;\n    my $header;\n    my $returncode=0;\n    my $message;\n    my @sources;\n\n    GetOptions( 'h|help'    => \\$arguments{help},\n        'user=s'        => \\$username,\n        'passwd=s'      => \\$password,\n        'base=s'        => \\$baseUri,\n        'pid=s'         => \\$pidUrl,\n        'cred=s'        => \\$credentials,\n        'data=s'        => \\$handleData,\n        'type=s'        => \\$type,\n        'header=s'      => \\$header,\n        'get'           => \\$arguments{get},\n        'put'           => \\$arguments{put},\n        'delete'        => \\$arguments{delete},\n        'post'          => \\$arguments{post},\n        'pretty'        => \\$arguments{pretty},\n        'd|debug'       => \\$arguments{debug},\n    );\n\n    # Check the help flag\n    if( $arguments{help} ) {\n\n        # Set the returncode\n        $returncode=255;\n\n        $message = print_help();\n    }\n    \n    # Check the debug flag\n    if( $arguments{debug} ) {\n\n        $settings_ref->{debug} = 'True';\n        printf('debug is                      : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # Check the pretty flag\n    if( $arguments{pretty} ) {\n\n        $settings_ref->{handle}->{format} = 'pretty';\n        printf('pretty format printing is     : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # Check the action flag's (get,put,delete,post,search,nagios)\n    if( $arguments{get} ) {\n\n        $settings_ref->{handle}->{action} = 'get';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{put} ) {\n\n        $settings_ref->{handle}->{action} = 'put';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{delete} ) {\n\n        $settings_ref->{handle}->{action} = 'delete';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    } elsif ( $arguments{post} ) {\n\n        $settings_ref->{handle}->{action} = 'post';\n        printf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the username\n    if( $username ) {\n\n        $settings_ref->{handle}->{credentials}->{username} = $username;\n        printf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the password\n    if( $password ) {\n\n        $settings_ref->{handle}->{credentials}->{password} = $password;\n        printf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the base uri\n    if( $baseUri ) {\n\n        $settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;\n        printf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n\n    # check the pid url\n    if( $pidUrl ) {\n\n        $settings_ref->{handle}->{url}->{pid} = $pidUrl;\n        printf(\"The pid is                    : %s\\n\",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the handle data\n    if( $handleData ) {\n\n        $settings_ref->{handle}->{data}->{putpost} = $handleData;\n        printf(\"The data is                   : %s\\n\",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the type data\n    if( $type ) {\n\n        $settings_ref->{handle}->{type} = $type;\n        printf(\"The type(s) to show is/are    : %s\\n\",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;\n\n    }\n    \n    # check the header data\n    if( $header ) {\n\n        $settings_ref->{handle}->{headerextra} = $header;\n        printf(\"The extra header info is      : %s\\n\",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;\n    \n    }\n\n    # check the credentials data\n    if( $credentials ) {\n\n        # read the credentials from the file\n        my $filename = $credentials;\n        my $json_text = do {\n            open(my $json_fh, \"<:encoding(UTF-8)\", $filename)  or die(\"Can't open $filename: $!\\n\");\n            local $/;\n            <$json_fh>\n        };\n\n        # convert from json and put in correct place \n        my $json = JSON->new;\n        $settings_ref->{handle}->{credentials} = $json->decode($json_text);\n\n        printf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n        printf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n        printf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n    }\n\n    # Print the message\n    if( $message ) {\n\n        print \"$message\\n\";\n    };\n\n    # Return the results\n    return($returncode);\n\n};\n")))}u.isMDXComponent=!0}}]);