"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[104],{382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>T,contentTitle:()=>b,default:()=>y,frontMatter:()=>m,metadata:()=>_,toc:()=>E});var r=n(4848),s=n(8453);function i(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in curl"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'curl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X DELETE https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5\n'})})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in perl"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-perl",children:"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Getopt::Long;\nuse Switch 'Perl5', 'Perl6';\nuse JSON;\nuse WWW::Curl::Easy;\n\nmy $fullargv0 = $0;\nmy ($argv0) = $fullargv0 =~ /([^\\/\\\\]+)$/;\n\nmy %settings = (\n'debug' => 'False',\n'handle' => {\n\t'action' =>'delete',\n\t'credentials' \t=>\t{\n\t\t'username'\t=> 'empty',\n\t\t'password'\t=> 'empty',\n\t\t'baseuri'\t=> 'empty',\n\t},\n\t'data'\t=>{\n\t\t'get'\t=> '',\n\t\t'putpost'=> '',\n\t},\n\t'format' => 'none',\n\t'headerextra'\t=> '',\n\t'type' => 'none',\n\t'url'=>\t{\n\t\t'pid'=> '',\n\t},\n},\n);\n\n# Main subroutine\nsub main {\n\n\t#Get the subroutine arguments\n\tmy $settings_ref = shift;\n\n\t# Get the script arguments\n\t(my $returncode) = get_arguments($settings_ref);\n\n\tif( $returncode == 0 ) \n\t\tperformDelete($settings_ref); \n\n\treturn($returncode);\n}\n \n# Subroutine to perform a DELETE action\nsub performDelete {\n\n\t# Get the subroutine arguments\n\tmy $settings_ref = shift;\n\n\t#construct url\n\tmy $url=\"$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}\";\n\tprintf(\"The constructed url is        : %s\\n\",$url) if $settings_ref->{debug} =~ /True/ ;\n\n\t# perform action\n\t(my $returncode, my $response_code, my $response_content_type ) = httpDelete($settings_ref, $url );\n\n\t# Looking at the results of the curl request\n\tif ($returncode == 0) {\n\t\tprint('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t\t# judge result and next action based on $response_code\n\t\tif ($response_code >= 200 && $response_code < 300 ) {\n\t\t\tprint('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t} else {\n\t\t\tprint('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t\tprint(\"$response_code\\n\");\n\t\t} \n\n\t} else {\n\t\tprint('An error happened\\n');\n\t}\n}\n# reader helper calback function\nsub read_callback {\n\tmy ($maxlength,$pointer)=@_;\n\t# printf(\"The MAXLENGTH is     : \\n\", $maxlength);\n\t# printf(\"The POINTER is       : \\n\", $$pointer) ;\n\tmy $data = $$pointer;\n\t$$pointer = \"\";\n\treturn $data;\n}\n\n# Subroutine delete via a http DELETE\nsub httpDelete {\n\n\t# Get the subroutine arguments\n\tmy $settings_ref = shift;\n\tmy $url = shift;\n\n\tprint('Entering httpDelete           :\\n')         if $settings_ref->{debug} =~ /True/;\n\n\t# local varables\n\tmy $body = \"\";\n\tmy $header = \"\";\n\tmy $response_code;\n\tmy $response_content_type;\n\n\tmy $curl = WWW::Curl::Easy->new;\n\n\t# set options for the curl http request\n\t$curl->setopt(CURLOPT_HEADER, 0);\n\t$curl->setopt(CURLOPT_NOBODY, 1);\n\t$curl->setopt(CURLOPT_CUSTOMREQUEST, 'DELETE');\n\t$curl->setopt(CURLOPT_URL, $url);\n\t$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});\n\t$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});\n\n\t#debugging\n\t#$curl->setopt (CURLOPT_VERBOSE, 1);\n\n\t# Do the actual curl http request\n\tmy $returncode = $curl->perform;\n\n\t# Looking at the results of the curl request\n\tif ($returncode == 0) {\n\t\tprint('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t\t$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);\n\t\t$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);\n\t\tprint(\"Received response code        : $response_code\\n\")         if $settings_ref->{debug} =~ /True/;\n\t\tprint(\"Received response content type: $response_content_type\\n\") if $settings_ref->{debug} =~ /True/;\n\n\t\t# judge result and next action based on $response_code\n\t\tif ($response_code >= 200 && $response_code < 300 ) {\n\t\t\tprint('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t} else {\n\t\t\tprint('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t\tprint(\"$response_code\\n\") if $settings_ref->{debug} =~ /True/ ;\n\t\t} \n\n\t} else {\n\t\t# Error code, type of error, error message\n\t\tprint(\"An error happened: $returncode \".$curl->strerror($returncode).\" \".$curl->errbuf.\"\\n\");\n\t}\n\n\t# Return the results\n\treturn($returncode, $response_code, $response_content_type );\n}\n# Subroutine to get and check all script arguments\nsub get_arguments {\n\n\t# Get the subroutine arguments\n\tmy $settings_ref = shift;\n\n\t# Define local variables\n\tmy %arguments;\n\tmy $username;\n\tmy $password;\n\tmy $baseUri;\n\tmy $pidUrl;\n\tmy $credentials;\n\tmy $handleData;\n\tmy $type;\n\tmy $header;\n\tmy $returncode=0;\n\tmy $message;\n\tmy @sources;\n\n\tGetOptions( 'h|help'    => \\$arguments{help},\n\t\t'user=s'\t\t=> \\$username,\n\t\t'passwd=s'\t\t=> \\$password,\n\t\t'base=s'\t\t=> \\$baseUri,\n\t\t'pid=s'\t\t\t=> \\$pidUrl,\n\t\t'cred=s'\t\t=> \\$credentials,\n\t\t'data=s'\t\t=> \\$handleData,\n\t\t'type=s'\t\t=> \\$type,\n\t\t'header=s'\t\t=> \\$header,\n\t\t'get'\t\t\t=> \\$arguments{get},\n\t\t'put'\t\t\t=> \\$arguments{put},\n\t\t'delete'\t\t=> \\$arguments{delete},\n\t\t'post'\t\t\t=> \\$arguments{post},\n\t\t'pretty'\t\t=> \\$arguments{pretty},\n\t\t'd|debug'\t\t=> \\$arguments{debug},\n\t);\n\n\t# Check the help flag\n\tif( $arguments{help} ) {\n\n\t\t# Set the returncode\n\t\t$returncode=255;\n\n\t\t$message = print_help();\n\t}\n\t\n\t# Check the debug flag\n\tif( $arguments{debug} ) {\n\n\t\t$settings_ref->{debug} = 'True';\n\t\tprintf('debug is                      : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# Check the pretty flag\n\tif( $arguments{pretty} ) {\n\n\t\t$settings_ref->{handle}->{format} = 'pretty';\n\t\tprintf('pretty format printing is     : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# Check the action flag's (get,put,delete,post,search,nagios)\n\tif( $arguments{get} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'get';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t} elsif ( $arguments{put} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'put';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t} elsif ( $arguments{delete} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'delete';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t} elsif ( $arguments{post} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'post';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the username\n\tif( $username ) {\n\n\t\t$settings_ref->{handle}->{credentials}->{username} = $username;\n\t\tprintf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the password\n\tif( $password ) {\n\n\t\t$settings_ref->{handle}->{credentials}->{password} = $password;\n\t\tprintf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the base uri\n\tif( $baseUri ) {\n\n\t\t$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;\n\t\tprintf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the pid url\n\tif( $pidUrl ) {\n\n\t\t$settings_ref->{handle}->{url}->{pid} = $pidUrl;\n\t\tprintf(\"The pid is                    : %s\\n\",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;\n\t\n\t}\n\n\t# check the handle data\n\tif( $handleData ) {\n\n\t\t$settings_ref->{handle}->{data}->{putpost} = $handleData;\n\t\tprintf(\"The data is                   : %s\\n\",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;\n\t\n\t}\n\n\t# check the type data\n\tif( $type ) {\n\n\t\t$settings_ref->{handle}->{type} = $type;\n\t\tprintf(\"The type(s) to show is/are    : %s\\n\",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\t\n\t# check the header data\n\tif( $header ) {\n\n\t\t$settings_ref->{handle}->{headerextra} = $header;\n\t\tprintf(\"The extra header info is      : %s\\n\",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;\n\t\n\t}\n\n\t# check the credentials data\n\tif( $credentials ) {\n\n\t\t# read the credentials from the file\n\t\tmy $filename = $credentials;\n\t\tmy $json_text = do {\n\t\t\topen(my $json_fh, \"<:encoding(UTF-8)\", $filename)  or die(\"Can't open $filename: $!\\n\");\n\t\t\tlocal $/;\n\t\t\t<$json_fh>\n\t\t};\n\n\t\t# convert from json and put in correct place \n\t\tmy $json = JSON->new;\n\t\t$settings_ref->{handle}->{credentials} = $json->decode($json_text);\n\n\t\tprintf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\t\tprintf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\t\tprintf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\t}\n\n\t# Print the message\n\tif( $message ) {\n\n\t\tprint \"$message\\n\";\n\t};\n\n\t# Return the results\n\treturn($returncode);\n\n};\n"})})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function u(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in php"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";\n$PIDSERVICE_USER="YOURUSERNAME";\n$PIDSERVICE_PASSWD="YOURPASSWORD";\n$HANDLENAME="05C3DB56-5692-11E3-AF8F-1C6F65A666B5";\n$PIDTODELETE= $PIDSERVICE_URL.$HANDLENAME;\n// Get cURL resource\n$curl = curl_init();\n\n// Set the url to authenticate\ncurl_setopt($curl,CURLOPT_URL,$PIDTODELETE);\n// Set the authentication options\ncurl_setopt($curl, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);\ncurl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n//set the DELETE action\ncurl_setopt($curl, CURLOPT_CUSTOMREQUEST, "DELETE");\n\n// Include header in result? (0 = yes, 1 = no)\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// Should cURL return or print out the data? (true = return, false = print)\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n\n// Download the given URL, and return output\n$output = curl_exec($curl);\n$info = curl_getinfo($curl);\nif( $info[\'http_code\']==204) echo "The PID was successfully deleted";\nif( $info[\'http_code\']==401) echo "Authorization failed: Either your login or your password is wrong.";\nif( $info[\'http_code\']==403) echo "HTTP/1.1 403 Forbidden: The operation is not permitted.<br/>";\nif( $info[\'http_code\']==405) echo "HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong<br/>";\n\n// Close the cURL resource, and free system resources\ncurl_close($curl);\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}function d(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in python"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'import urllib.request, urllib.error, urllib.parse\n\nPIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX"\nPIDSERVICE_USER="YOURUSERNAME"\nPIDSERVICE_PASSWD="YOURPASSWORD"\nHANDLENAME="05C3DB56-5692-11E3-AF8F-1C6F65A666B5"\nURL_TO_OPEN=PIDSERVICE_URL+HANDLENAME\nDATAURL=""\n\n# create a password manager\npassword_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n\n# Add the username and password.\npassword_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)\n\nhandler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n\n# create "opener" (OpenerDirector instance)\nopener = urllib.request.build_opener(handler)\n\n# use the opener to fetch a URL\nopener.open(URL_TO_OPEN)\n\n# Install the opener.\n# Now all calls to urllib2.urlopen use our opener.\nurllib.request.install_opener(opener)\n\n#http://stackoverflow.com/questions/2407126/python-urllib2-basic-auth-problem\nREQUESTDATA = urllib.request.Request(URL_TO_OPEN)\n# creates the delete method\nREQUESTDATA.get_method = lambda: \'DELETE\'\n\ntry:\n        DATAURL = urllib.request.urlopen(REQUESTDATA)\nexcept urllib.error.URLError as e:\n        if e.code == 404:\n                print("404-Not found")\n        if e.code == 401:\n                print("401-Authentication failed")\n        if e.code == 403:\n                print("403-Not permitted")\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function h(e){const t={code:"code",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"the-response",children:"The response:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 204 No Content: (Success)"}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 401 Unauthorized: Your username or your password is wrong"}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 404 Not found: The resource doesn't exist"}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 403 Forbidden: The operation is not permitted"}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 405 Method Not Allowed: The submitted url with PID is wrong"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"> DELETE /handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5 HTTP/1.1\n> Authorization: Basic Y2xhcmluLWVsOjUxMjdkZWIxZTJjNg==\n> User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3\n> Host: epic.grnet.gr\n> Accept:application/json\n> Content-Type:application/json\n>\n< HTTP/1.1 204 No Content\n< Date: Fri, 22 Nov 2013 13:05:14 GMT\n< Content-Length: 0\n"})})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}var g=n(1470),$=n(9365);const m={id:"api-delete",title:"API - Delete a PID",kind:"code",slug:"delete",result:"resultdelete",sidebar_position:10},b=void 0,_={id:"epic_api/api-delete",title:"API - Delete a PID",description:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.",source:"@site/docs/epic_api/api-delete.md",sourceDirName:"epic_api",slug:"/epic_api/delete",permalink:"/docs/epic_api/delete",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{id:"api-delete",title:"API - Delete a PID",kind:"code",slug:"delete",result:"resultdelete",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"API - Update an existing PID",permalink:"/docs/epic_api/api-update"},next:{title:"API - Part Identifiers",permalink:"/docs/epic_api/api-partial"}},T={},E=[{value:"DELETE a PID - Description",id:"delete-a-pid---description",level:2},{value:"Example",id:"example",level:2}];function x(e){const t={a:"a",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON."}),"\n",(0,r.jsx)(t.h2,{id:"delete-a-pid---description",children:"DELETE a PID - Description"}),"\n",(0,r.jsx)(t.p,{children:"You may want to delete a defined PID. Once you have the PID url, then you can delete the PID, by just supplying it."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"At the moment a nodelete profile is enforced. So the deletion of handles is deactivated."})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)(t.td,{children:"Delete a PID"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"URL"})}),(0,r.jsx)(t.td,{children:"The  API Service URL with the PID"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"HTTP Method"})}),(0,r.jsx)(t.td,{children:"DELETE"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Security"})}),(0,r.jsx)(t.td,{children:"Requires ownership of the PID. So you must authenticate before actually deleting the file"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"The data you must send in order to delete are described in the following table"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Required"}),(0,r.jsx)(t.th,{children:"Default value"}),(0,r.jsx)(t.th,{children:"Example value"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"suffix"}),(0,r.jsx)(t.td,{children:"The local name of the handle in the system"}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"05C3DB56-5692-11E3-AF8F-1C6F65A666B5"})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["In this example we are going to delete of a selected PID ",(0,r.jsx)(t.a,{href:"https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5",children:"https://epic.grnet.gr/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5"})]}),"\n","\n","\n","\n",(0,r.jsxs)(g.A,{defaultValue:"curl",values:[{label:"Curl",value:"curl"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Perl",value:"perl"}],children:[(0,r.jsx)($.A,{value:"curl",children:(0,r.jsx)(a,{})}),(0,r.jsx)($.A,{value:"python",children:(0,r.jsx)(p,{})}),(0,r.jsx)($.A,{value:"php",children:(0,r.jsx)(c,{})}),(0,r.jsx)($.A,{value:"perl",children:(0,r.jsx)(o,{})})]}),"\n",(0,r.jsx)(f,{})]})}function y(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var r=n(4164);const s={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,a),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>x});var r=n(6540),s=n(4164),i=n(3104),a=n(6347),l=n(205),o=n(7485),u=n(1682),c=n(9466);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const s=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,i=p(e),[a,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[u,d]=f({queryString:n,groupId:s}),[g,$]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,i]=(0,c.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:s}),m=(()=>{const e=u??g;return h({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{m&&o(m)}),[m]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),$(e)}),[d,$,i]),tabValues:i}}var $=n(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(4848);function _(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.a_)(),c=e=>{const t=e.currentTarget,n=o.indexOf(t),s=l[n].value;s!==r&&(u(t),a(s))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>o.push(e),onKeyDown:d,onClick:c,...i,className:(0,s.A)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function T(e){let{lazy:t,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function E(e){const t=g(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",m.tabList),children:[(0,b.jsx)(_,{...e,...t}),(0,b.jsx)(T,{...e,...t})]})}function x(e){const t=(0,$.A)();return(0,b.jsx)(E,{...e,children:d(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var r=n(6540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);