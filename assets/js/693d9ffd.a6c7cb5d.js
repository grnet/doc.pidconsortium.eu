"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66],{234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>_,contentTitle:()=>T,default:()=>y,frontMatter:()=>$,metadata:()=>x,toc:()=>b});var r=n(4848),s=n(8453);function a(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in curl"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'#!/bin/bash    \n\nSUFFIX=`uuidgen`\ncurl -v -u "YOURUSERNAME:YOURPASSWORD" -H "Accept:application/json" -H "Content-Type:application/json" -X PUT --data \'[{"type":"URL","parsed_data":"http://www.grnet.gr/"}]\' https://epic.grnet.gr/api/v2/handles/11239/$SUFFIX \n'})})]})}function i(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}function o(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in perl"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-perl",children:"#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse Data::Dumper;\nuse Getopt::Long;\nuse Switch 'Perl5', 'Perl6';\nuse JSON;\nuse WWW::Curl::Easy;\n\nmy $fullargv0 = $0;\nmy ($argv0) = $fullargv0 =~ /([^\\/\\\\]+)$/;\n\nmy %settings = (\n'debug' => 'False',\n'handle' => {\n\t'action' =>'put',\n\t'credentials' \t=>\t{\n\t\t'username'\t=> 'empty',\n\t\t'password'\t=> 'empty',\n\t\t'baseuri'\t=> 'empty',\n\t},\n\t'data'\t=>{\n\t\t'get'\t=> '',\n\t\t'putpost'=> '',\n\t},\n\t'format' => 'none',\n\t'headerextra'\t=> '',\n\t'type' => 'none',\n\t'url'=>\t{\n\t\t'pid'=> 'ADD A PID',\n\t},\n},\n);\n\n# Main subroutine\nsub main {\n\n\t#Get the subroutine arguments\n\tmy $settings_ref = shift;\n\n\t# Get the script arguments\n\t(my $returncode) = get_arguments($settings_ref);\n\n\tif( $returncode == 0 ) \n\t\t performPut($settings_ref);\n\n\treturn($returncode);\n}\n \n# Subroutine to perform a PUT action\nsub performPut {\n\n\t# Get the subroutine arguments\n\tmy $settings_ref = shift;\n\n\t#construct url and headers\n\tmy $url=\"$settings_ref->{handle}->{credentials}->{baseuri}$settings_ref->{handle}->{url}->{pid}\";\n\tprintf(\"The constructed url is        : %s\\n\",$url) if $settings_ref->{debug} =~ /True/ ;\n\tmy @httpHeaders = ( 'Content-Type: application/json' );\n\t# add extra header info. f.i. \"If-Match: *\" or \"If-None-Match: *\"\n\tpush(@httpHeaders, \"$settings_ref->{handle}->{headerextra}\" ) if $settings_ref->{handle}->{headerextra} ;\n\n\t#construct data\n\tmy $data=$settings_ref->{handle}->{data}->{putpost};\n\tprintf(\"The data is                   : %s\\n\",$data) if $settings_ref->{debug} =~ /True/ ;\n\n\t# perform action\n\t(my $returncode, my $response_code, my $response_content_type, my $response_body ) = httpPut($settings_ref, $url, \\@httpHeaders, $data );\n\n\t# Looking at the results of the curl request\n\tif ($returncode == 0) {\n\t\tprint('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t\t# judge result and next action based on $response_code\n\t\tif ($response_code >= 200 && $response_code < 300 ) {\n\t\t\tprint('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t} else {\n\t\t\tprint('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t\tprint(\"$response_code\\n\");\n\t\t} \n\n\t} else {\n\t\tprint('An error happened\\n');\n\t}\n}\n\n# reader helper calback function\nsub read_callback {\n\tmy ($maxlength,$pointer)=@_;\n\t# printf(\"The MAXLENGTH is     : \\n\", $maxlength);\n\t# printf(\"The POINTER is       : \\n\", $$pointer) ;\n\tmy $data = $$pointer;\n\t$$pointer = \"\";\n\treturn $data;\n}\n\n# Subroutine to post data via a http PUT\nsub httpPut {\n\n\t# Get the subroutine arguments\n\tmy $settings_ref = shift;\n\tmy $url = shift;\n\tmy $httpHeaders_ref = shift;\n\tmy $data = shift;\n\n\tprint('Entering httpPut              :\\n')         if $settings_ref->{debug} =~ /True/;\n\n\t# local varables\n\tmy $length = length ($data);\n\tmy $body = \"\";\n\tmy $header = \"\";\n\tmy $response_body;\n\tmy $response_code;\n\tmy $response_content_type;\n\n\tmy $curl = WWW::Curl::Easy->new;\n\n\t# set options for the curl http request\n\t$curl->setopt(CURLOPT_HEADER, 0);\n\t$curl->setopt(CURLOPT_HTTPHEADER, $httpHeaders_ref );\n\t$curl->setopt(CURLOPT_READFUNCTION, \\&read_callback);\n\t$curl->setopt(CURLOPT_UPLOAD, 1);\n\t$curl->setopt(CURLOPT_INFILE, \\$data);\n\t$curl->setopt(CURLOPT_INFILESIZE, length($data));\n\t$curl->setopt(CURLOPT_URL, $url);\n\t$curl->setopt(CURLOPT_USERNAME, $settings_ref->{handle}->{credentials}->{username});\n\t$curl->setopt(CURLOPT_PASSWORD, $settings_ref->{handle}->{credentials}->{password});\n\n\t#debugging\n\t#$curl->setopt (CURLOPT_VERBOSE, 1);\n\n\t# A filehandle, reference to a scalar or reference to a typeglob can be used here.\n\topen my $fh, '>', \\$response_body or die \"$!\";\n\t$curl->setopt(CURLOPT_WRITEDATA, $fh);\n\n\t# Do the actual curl http request\n\tmy $returncode = $curl->perform;\n\n\t# close file handle\n\tclose($fh);\n\n\t# Looking at the results of the curl request\n\tif ($returncode == 0) {\n\t\tprint('Transfer went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t\t$response_code         = $curl->getinfo(CURLINFO_HTTP_CODE);\n\t\t$response_content_type = $curl->getinfo(CURLINFO_CONTENT_TYPE);\n\t\tprint(\"Received response code        : $response_code\\n\")         if $settings_ref->{debug} =~ /True/;\n\t\tprint(\"Received response content type: $response_content_type\\n\") if $settings_ref->{debug} =~ /True/;\n\n\t\t# judge result and next action based on $response_code\n\t\tif ($response_code >= 200 && $response_code < 300 ) {\n\t\t\tprint('The request went ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t\tprint(\"$response_body\\n\") if $settings_ref->{debug} =~ /True/ ;\n\t\t} else {\n\t\t\tprint('The request went NOT ok\\n') if $settings_ref->{debug} =~ /True/ ;\n\t\t\tprint(\"$response_code\\n\") if $settings_ref->{debug} =~ /True/;\n\t\t} \n\n\t} else {\n\t\t# Error code, type of error, error message\n\t\tprint(\"An error happened: $returncode \".$curl->strerror($returncode).\" \".$curl->errbuf.\"\\n\");\n\t}\n\n\t# Return the results\n\treturn($returncode, $response_code, $response_content_type, $response_body );\n}\n# Subroutine to get and check all script arguments\nsub get_arguments {\n\n\t# Get the subroutine arguments\n\tmy $settings_ref = shift;\n\n\t# Define local variables\n\tmy %arguments;\n\tmy $username;\n\tmy $password;\n\tmy $baseUri;\n\tmy $pidUrl;\n\tmy $credentials;\n\tmy $handleData;\n\tmy $type;\n\tmy $header;\n\tmy $returncode=0;\n\tmy $message;\n\tmy @sources;\n\n\tGetOptions( 'h|help'    => \\$arguments{help},\n\t\t'user=s'\t\t=> \\$username,\n\t\t'passwd=s'\t\t=> \\$password,\n\t\t'base=s'\t\t=> \\$baseUri,\n\t\t'pid=s'\t\t\t=> \\$pidUrl,\n\t\t'cred=s'\t\t=> \\$credentials,\n\t\t'data=s'\t\t=> \\$handleData,\n\t\t'type=s'\t\t=> \\$type,\n\t\t'header=s'\t\t=> \\$header,\n\t\t'get'\t\t\t=> \\$arguments{get},\n\t\t'put'\t\t\t=> \\$arguments{put},\n\t\t'delete'\t\t=> \\$arguments{delete},\n\t\t'post'\t\t\t=> \\$arguments{post},\n\t\t'pretty'\t\t=> \\$arguments{pretty},\n\t\t'd|debug'\t\t=> \\$arguments{debug},\n\t);\n\n\t# Check the help flag\n\tif( $arguments{help} ) {\n\n\t\t# Set the returncode\n\t\t$returncode=255;\n\n\t\t$message = print_help();\n\t}\n\t\n\t# Check the debug flag\n\tif( $arguments{debug} ) {\n\n\t\t$settings_ref->{debug} = 'True';\n\t\tprintf('debug is                      : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# Check the pretty flag\n\tif( $arguments{pretty} ) {\n\n\t\t$settings_ref->{handle}->{format} = 'pretty';\n\t\tprintf('pretty format printing is     : on\\n') if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# Check the action flag's (get,put,delete,post,search,nagios)\n\tif( $arguments{get} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'get';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t} elsif ( $arguments{put} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'put';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t} elsif ( $arguments{delete} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'delete';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t} elsif ( $arguments{post} ) {\n\n\t\t$settings_ref->{handle}->{action} = 'post';\n\t\tprintf(\"The action is                 : %s\\n\", $settings_ref->{handle}->{action}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the username\n\tif( $username ) {\n\n\t\t$settings_ref->{handle}->{credentials}->{username} = $username;\n\t\tprintf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the password\n\tif( $password ) {\n\n\t\t$settings_ref->{handle}->{credentials}->{password} = $password;\n\t\tprintf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the base uri\n\tif( $baseUri ) {\n\n\t\t$settings_ref->{handle}->{credentials}->{baseuri} = $baseUri;\n\t\tprintf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\n\t# check the pid url\n\tif( $pidUrl ) {\n\n\t\t$settings_ref->{handle}->{url}->{pid} = $pidUrl;\n\t\tprintf(\"The pid is                    : %s\\n\",$settings_ref->{handle}->{url}->{pid}) if $settings_ref->{debug} =~ /True/ ;\n\t\n\t}\n\n\t# check the handle data\n\tif( $handleData ) {\n\n\t\t$settings_ref->{handle}->{data}->{putpost} = $handleData;\n\t\tprintf(\"The data is                   : %s\\n\",$settings_ref->{handle}->{data}->{putpost}) if $settings_ref->{debug} =~ /True/ ;\n\t\n\t}\n\n\t# check the type data\n\tif( $type ) {\n\n\t\t$settings_ref->{handle}->{type} = $type;\n\t\tprintf(\"The type(s) to show is/are    : %s\\n\",$settings_ref->{handle}->{type}) if $settings_ref->{debug} =~ /True/ ;\n\n\t}\n\t\n\t# check the header data\n\tif( $header ) {\n\n\t\t$settings_ref->{handle}->{headerextra} = $header;\n\t\tprintf(\"The extra header info is      : %s\\n\",$settings_ref->{handle}->{headerextra}) if $settings_ref->{debug} =~ /True/ ;\n\t\n\t}\n\n\t# check the credentials data\n\tif( $credentials ) {\n\n\t\t# read the credentials from the file\n\t\tmy $filename = $credentials;\n\t\tmy $json_text = do {\n\t\t\topen(my $json_fh, \"<:encoding(UTF-8)\", $filename)  or die(\"Can't open $filename: $!\\n\");\n\t\t\tlocal $/;\n\t\t\t<$json_fh>\n\t\t};\n\n\t\t# convert from json and put in correct place \n\t\tmy $json = JSON->new;\n\t\t$settings_ref->{handle}->{credentials} = $json->decode($json_text);\n\n\t\tprintf(\"The username is               : %s\\n\",$settings_ref->{handle}->{credentials}->{username}) if $settings_ref->{debug} =~ /True/ ;\n\t\tprintf(\"The password is               : %s\\n\",$settings_ref->{handle}->{credentials}->{password}) if $settings_ref->{debug} =~ /True/ ;\n\t\tprintf(\"The base uri is               : %s\\n\",$settings_ref->{handle}->{credentials}->{baseuri}) if $settings_ref->{debug} =~ /True/ ;\n\t}\n\n\t# Print the message\n\tif( $message ) {\n\n\t\tprint \"$message\\n\";\n\t};\n\n\t# Return the results\n\treturn($returncode);\n\n};\n\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}function l(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in php"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'$PIDSERVICE_URL="THE_SERVICE_URL_WITH_PREFIX";\n$PIDSERVICE_USER="YOURUSERNAME";\n$PIDSERVICE_PASSWD="YOURPASSWORD";\n$UUID = gen_uuid(); //a function to generate a uuid\n$URL_TO_OPEN = $PIDSERVICE_URL.$UUID;\n$data = array(array(\'type\' => \'URL\',\'parsed_data\'=>\'http://www.grnet.gr/\'));\n$update_json=json_encode($data);\n\n// Get cURL resource\n$ch = curl_init();\n\n//Set the headers to complete the request\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array(\'Content-Type: application/json\',\'Content-Length: \' . strlen($update_json)));\n\n//set the PUT Action\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");\n\n//SET the postfield data\ncurl_setopt($ch, CURLOPT_POSTFIELDS,$update_json);\n\n// Should cURL return or print out the data? (true = return, false = print)\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n//Set the url with the new name of the PID \ncurl_setopt($ch, CURLOPT_URL, $URL_TO_OPEN);\n\n// Set the authentication options\ncurl_setopt($ch, CURLOPT_USERPWD, $PIDSERVICE_USER.":".$PIDSERVICE_PASSWD);\ncurl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);\n\n$output = curl_exec($ch);\n$info = curl_getinfo($ch);\n\n// Download the given URL, and return output \n\nif( $info[\'http_code\']==200) echo "HANDLE EXISTS<br/>";\nif( $info[\'http_code\']==201) echo "PID CREATED<br/>";\nif( $info[\'http_code\']==204) echo "PID UPDATED<br/>";\nif( $info[\'http_code\']==404) echo "HANDLE DOESNT EXIST<br/>";\n\ncurl_close($ch);\n\nfunction gen_uuid() {\n    return sprintf( \'%04x%04x-%04x-%04x-%04x-%04x%04x%04x\',\n            // 32 bits for "time_low"\n            mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),\n\n            // 16 bits for "time_mid"\n            mt_rand( 0, 0xffff ),\n\n            // 16 bits for "time_hi_and_version",\n            // four most significant bits holds version number 4\n            mt_rand( 0, 0x0fff ) | 0x4000,\n\n            // 16 bits, 8 bits for "clk_seq_hi_res",\n            // 8 bits for "clk_seq_low",\n            // two most significant bits holds zero and one for variant DCE1.1\n            mt_rand( 0, 0x3fff ) | 0x8000,\n\n            // 48 bits for "node"\n            mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )\n    );\n}\n'})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}function u(e){const t={code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The request in python"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"import urllib.request, urllib.error, urllib.parse\nimport uuid\nimport json\n\nPIDSERVICE_URL=\"THE_SERVICE_URL_WITH_PREFIX\"\nPIDSERVICE_USER=\"YOURUSERNAME\"\nPIDSERVICE_PASSWD=\"YOURPASSWORD\"\nSUFFIX =str(uuid.uuid1());\nURL_TO_OPEN=PIDSERVICE_URL+SUFFIX\nDATAURL=''\n\n# create a password manager\npassword_mgr = urllib.request.HTTPPasswordMgrWithDefaultRealm()\n\n# Add the username and password.\npassword_mgr.add_password(None, PIDSERVICE_URL, PIDSERVICE_USER, PIDSERVICE_PASSWD)\n\nhandler = urllib.request.HTTPBasicAuthHandler(password_mgr)\n\n# create \"opener\" (OpenerDirector instance)\nopener = urllib.request.build_opener(handler)\n\n# use the opener to fetch a URL\nopener.open(PIDSERVICE_URL)\n\n# Install the opener.\n# Now all calls to urllib2.urlopen use the created opener.\nurllib.request.install_opener(opener)\n\n#create the json data\nJSONDATA = [{'type':'URL','parsed_data':'http://www.grnet.gr'}]\nJSONDATATOSEND = json.dumps(JSONDATA);\n\nREQUESTDATA = urllib.request.Request(URL_TO_OPEN, data=JSONDATATOSEND)\n\n#create the headers\nREQUESTDATA.add_header('Content-Type','application/json')\nREQUESTDATA.add_header('Content-Length',len(JSONDATATOSEND))\n\n# creates the PUT method\nREQUESTDATA.get_method = lambda: 'PUT'\n\ntry:\n    DATAURL = urllib.request.urlopen(REQUESTDATA)\n    \nexcept urllib.error.URLError as e:\n    print(e)\n    if e.code == 404:\n        print(\"404-Not found\")\n    if e.code == 401:\n        print(\"401-Authentication failed\")\n        #get http code of the request\n\nif DATAURL:\n    # Getting the code\n    print(\"This gets the code: \", DATAURL.code)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}function p(e){const t={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"the-response",children:"The response:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 201 Created: (Success)"}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 204 No-Content: The local name already exists , and instead of creating a new one you\u2019ve just updated the values of an existing one."}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 401 Unauthorized: Your username or your password is wrong"}),"\n",(0,r.jsxs)(t.li,{children:["HTTP/1.1 405 Method Not Allowed:","\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["You are trying to create a new handle in the main url of the server either (",(0,r.jsx)(t.a,{href:"https://epic.grnet.gr/handles/11239/",children:"https://epic.grnet.gr/handles/11239/"}),") or (",(0,r.jsx)(t.a,{href:"https://epic.grnet.gr/handles",children:"https://epic.grnet.gr/handles"}),"). You have not specified a unique name for your handle. (or)"]}),"\n",(0,r.jsx)(t.li,{children:"You are trying to create a new handle with manual generation of suffix name via POST instead of PUT. POST supports automatic generation of suffix name."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 412 Precondition failed: You have used the precondition (HTTP\u2019s If-Match: * or If-None-Match:*) in the request-header fields. The precondition given, evaluated to false when it was tested on the server and prevented the requested method from being applied."}),"\n",(0,r.jsx)(t.li,{children:"HTTP/1.1 415 Unsupported Media Type: You haven't specify the correct headers for your request. The service supports Json representation so you must define the content-type of the request."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'HTTP/1.1 201 Created\nDate: Mon, 25 Nov 2013 10:18:18 GMT\nContent-Length: 2211\nLocation: https://epic.grnet.gr/api/v2/handles/11239/05C3DB56-5692-11E3-AF8F-1C6F65A666B5\nETag: "1B2M2Y8AsgTpgAmY7PhCfg"\nLast-Modified: Thu, 01 Jan 1970 00:00:00 GMT\n'})})]})}function f(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}var g=n(1470),m=n(9365);const $={id:"api-create",title:"API - Create a new PID",kind:"code",slug:"create",result:"resultcreate",sidebar_position:8},T=void 0,x={id:"epic_api/api-create",title:"API - Create a new PID",description:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON.",source:"@site/docs/epic_api/api-create.md",sourceDirName:"epic_api",slug:"/epic_api/create",permalink:"/docs/epic_api/create",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"api-create",title:"API - Create a new PID",kind:"code",slug:"create",result:"resultcreate",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"API - Search a PID",permalink:"/docs/epic_api/search"},next:{title:"API - Update an existing PID",permalink:"/docs/epic_api/api-update"}},_={},b=[{value:"Create a new PID - Description",id:"create-a-new-pid---description",level:2},{value:"Example",id:"example",level:2}];function j(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"This API uses JSON as the primary exchange format. All implementations MUST be able to produce and consume JSON."}),"\n",(0,r.jsx)(t.h2,{id:"create-a-new-pid---description",children:"Create a new PID - Description"}),"\n",(0,r.jsx)(t.p,{children:"You want to create a new PID. There are two ways to create - generate a new PID"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"automatic generation of the suffix name via the POST method"}),"\n",(0,r.jsx)(t.li,{children:"manual generation of the suffix name via the PUT method"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"HTTP PUT can be used for both resource creation and resource updates .\nSo if you want to be sure that you are going to create a new one you must first check if it exists. If you don't check the existence of a PID based on the suffix it is possible that you will update the data of an existing one."}),"\n",(0,r.jsx)(t.p,{children:"There is a way to make your HTTP PUT request \u201cconditional\u201d in the sense that it will only be executed if the URL doesn\u2019t exist yet (which constitutes a create action), or that it does exist yet (which constitutes an update )."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsx)(t.p,{children:"In order to make the PUT request conditional use HTTP\u2019s If-Match: * or If-None-Match:* headers."})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Description"})}),(0,r.jsx)(t.td,{children:"Create a new PID"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"URL"})}),(0,r.jsx)(t.td,{children:"The API Service URL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"HTTP Method"})}),(0,r.jsx)(t.td,{children:"PUT for manual generation of suffix name"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"HTTP Method"})}),(0,r.jsx)(t.td,{children:"POST for automatic generation of suffix name"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.strong,{children:"Security"})}),(0,r.jsx)(t.td,{children:"Requires ownership of the PID. So you must authenticate before actually creating the PID"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"The data you must send in order to create are described in the following table"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Required"}),(0,r.jsx)(t.th,{children:"Default value"}),(0,r.jsx)(t.th,{children:"Example value"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"suffix"}),(0,r.jsx)(t.td,{children:"The local name of the handle in the system"}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsxs)(t.td,{children:["a) use a UUID generator via ",(0,r.jsx)(t.strong,{children:"PUT method"}),", b) automatic generation via ",(0,r.jsx)(t.strong,{children:"POST method"})]})]})})]}),"\n",(0,r.jsx)(t.p,{children:"The data you must send as json representation are described in the following table"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Required"}),(0,r.jsx)(t.th,{children:"Default value"}),(0,r.jsx)(t.th,{children:"Example value"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"type"}),(0,r.jsx)(t.td,{children:"Each handle has a set of values assigned to it.  These handle values use a common data structure for its data. The data type defines the syntax and semantics of the data in its data field."}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:"URL"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"parsed_data"}),(0,r.jsx)(t.td,{children:"A set of data that describes the resource identified by the handle. The syntax and semantics of parsed data are identified by the field."}),(0,r.jsx)(t.td,{children:"Yes"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"http://www.grnet.gr",children:"http://www.grnet.gr"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"timestamp"}),(0,r.jsx)(t.td,{children:"The timestamp records the last time this Handle Value was updated at the server. The field contains elapsed time since 00:00:00 UTC, January 1970 in milliseconds."}),(0,r.jsx)(t.td,{children:"NO"}),(0,r.jsx)(t.td,{children:"timestamp"}),(0,r.jsx)(t.td,{children:"2013-11-26T11:58:14Z"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ttl_type"}),(0,r.jsx)(t.td,{children:"the TTL type indicates whether the TTL value is absolute or relative.  The absolute TTL value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970.  A relative TTL specifies the time to live in terms of the number of seconds elapsed since the value was obtained by the client from any handle server."}),(0,r.jsx)(t.td,{children:"NO"}),(0,r.jsx)(t.td,{children:"integer 0=relative, 1=absolute by default 0"}),(0,r.jsx)(t.td,{children:"0"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ttl"}),(0,r.jsx)(t.td,{children:"a number that specifies the Time-To- Live of the value record. A positive value defines the time to live in terms of seconds since 00:00:00 UTC, January 1st 1970. A negative value specifies the time to live in terms of the number of seconds elapsed since the value was obtained. (if ttl_type is absolute, then this indicates the date/time of expiration in seconds since Jan 1 0:00:00 1970.)"}),(0,r.jsx)(t.td,{children:"NO"}),(0,r.jsx)(t.td,{children:"integer seconds"}),(0,r.jsx)(t.td,{children:"86400"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"refs"}),(0,r.jsx)(t.td,{children:"a list of references to other Handle Values"}),(0,r.jsx)(t.td,{children:"No"}),(0,r.jsx)(t.td,{children:"None"}),(0,r.jsxs)(t.td,{children:["[",(0,r.jsx)(t.code,{children:"{'idx':'1','handle':'11239/12'}"}),"] where idx is the value for index field of handle data, and handle is the referenced handle value"]})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["In this example we are going to create a new handle via the PUT method  in the following url ",(0,r.jsx)(t.a,{href:"https://epic.grnet.gr/handles/11239/UUIDGENERATE",children:"https://epic.grnet.gr/handles/11239/UUIDGENERATE"}),". There is an example via POST method at ",(0,r.jsx)(t.a,{href:"/docs/epic_api/generate",children:"PID generation page"})]}),"\n","\n","\n","\n",(0,r.jsxs)(g.A,{defaultValue:"curl",values:[{label:"Curl",value:"curl"},{label:"Python",value:"python"},{label:"PHP",value:"php"},{label:"Perl",value:"perl"}],children:[(0,r.jsx)(m.A,{value:"curl",children:(0,r.jsx)(i,{})}),(0,r.jsx)(m.A,{value:"python",children:(0,r.jsx)(h,{})}),(0,r.jsx)(m.A,{value:"php",children:(0,r.jsx)(c,{})}),(0,r.jsx)(m.A,{value:"perl",children:(0,r.jsx)(d,{})})]}),"\n",(0,r.jsx)(f,{})]})}function y(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(j,{...e})}):j(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var r=n(4164);const s={tabItem:"tabItem_Ymn6"};var a=n(4848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>j});var r=n(6540),s=n(4164),a=n(3104),i=n(6347),o=n(205),d=n(7485),l=n(1682),c=n(9466);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,l.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const s=(0,i.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})}),[a,s])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,a=h(e),[i,d]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[l,u]=f({queryString:n,groupId:s}),[g,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,a]=(0,c.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:s}),$=(()=>{const e=l??g;return p({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{$&&d($)}),[$]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),m(e)}),[u,m,a]),tabValues:a}}var m=n(2303);const $={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var T=n(4848);function x(e){let{className:t,block:n,selectedValue:r,selectValue:i,tabValues:o}=e;const d=[],{blockElementScrollPositionUntilNextRender:l}=(0,a.a_)(),c=e=>{const t=e.currentTarget,n=d.indexOf(t),s=o[n].value;s!==r&&(l(t),i(s))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return(0,T.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,T.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>d.push(e),onKeyDown:u,onClick:c,...a,className:(0,s.A)("tabs__item",$.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function _(e){let{lazy:t,children:n,selectedValue:s}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,T.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function b(e){const t=g(e);return(0,T.jsxs)("div",{className:(0,s.A)("tabs-container",$.tabList),children:[(0,T.jsx)(x,{...e,...t}),(0,T.jsx)(_,{...e,...t})]})}function j(e){const t=(0,m.A)();return(0,T.jsx)(b,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(6540);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);